{"version":3,"file":"Video.b09d3e62.js","sources":["../../packages/graphql/__generated__/graphql.ts","../../packages/markdown/libs/parserComment.ts","../../packages/markdown/components/MarkdownCommentBlock.vue","../../packages/video/components/CommentPost.vue","../../packages/video/components/CommentList.vue","../../packages/tag/components/RoundTag.vue","../../packages/video/components/EditTags.vue","../../packages/video/Video.vue"],"sourcesContent":["import { ObjectID as ObjectId } from '../index';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTimeUtc: Date;\n  ObjectId: ObjectId;\n  UtcDateTime: Date;\n};\n\nexport type Author = {\n  __typename: 'Author';\n  avatar: Scalars['String'];\n  commonTagids: Array<Scalars['Int']>;\n  commonTags: Array<AuthorTagObject | RegularTagObject>;\n  desc: Scalars['String'];\n  id: Scalars['ObjectId'];\n  pvUser?: Maybe<User>;\n  tagname: Scalars['String'];\n  type: Scalars['String'];\n  urls: Array<Scalars['String']>;\n  userSpaceIds: Array<Scalars['String']>;\n};\n\n/** AuthorTagObject */\nexport type AuthorTagObject = TagObject & {\n  __typename: 'AuthorTagObject';\n  alias: Array<Scalars['String']>;\n  author?: Maybe<Author>;\n  authorRole: Scalars['String'];\n  category: TagCategoryEnum;\n  count: Scalars['Int'];\n  id: Scalars['ObjectId'];\n  isAuthor: Scalars['Boolean'];\n  languages: Array<MultilingualMapping>;\n  meta: Meta;\n  tagid: Scalars['Int'];\n};\n\n/** base NotificationObject */\nexport type BaseNotificationObject = NotificationObject & {\n  __typename: 'BaseNotificationObject';\n  id: Scalars['ObjectId'];\n  read: Scalars['Boolean'];\n  time: Scalars['UtcDateTime'];\n  type: Scalars['String'];\n};\n\n/** BatchPostVideo data */\nexport type BatchPostVideoRequestData = {\n  /** If we should treat videos as copies to each other */\n  asCopies?: InputMaybe<Scalars['Boolean']>;\n  /** Reference to another copy, in video ObjectId format */\n  copy?: InputMaybe<Scalars['String']>;\n  /** Playlist ID if you want to add this video to a playlist */\n  pid?: InputMaybe<Scalars['String']>;\n  /** Rank of video in the playlist you are inserting into, default to last position */\n  rank?: InputMaybe<Scalars['Int']>;\n  /** Type of repost, one of 'official', 'official_repost', 'authorized_translation', 'authorized_repost', 'translation', 'repost', 'unknown' */\n  repostType?: InputMaybe<Scalars['String']>;\n  /** Video tags */\n  tags: Array<Scalars['String']>;\n  /** Video URLs */\n  videos: Array<Scalars['String']>;\n};\n\nexport type BatchPostVideoResult = {\n  __typename: 'BatchPostVideoResult';\n  taskIds: Scalars['String'];\n};\n\nexport type Comment = {\n  __typename: 'Comment';\n  children?: Maybe<Array<Comment>>;\n  content?: Maybe<Scalars['String']>;\n  deleted: Scalars['Boolean'];\n  downvotes: Scalars['Int'];\n  edited: Scalars['Boolean'];\n  hidden: Scalars['Boolean'];\n  id: Scalars['ObjectId'];\n  meta: Meta;\n  parent?: Maybe<Scalars['ObjectId']>;\n  pinned: Scalars['Boolean'];\n  thread?: Maybe<Thread>;\n  upvotes: Scalars['Int'];\n};\n\nexport enum CommentType {\n  Playlist = 'PLAYLIST',\n  Video = 'VIDEO'\n}\n\n/** required parameters for editing a comment */\nexport type EditCommentParameters = {\n  /** Target comment_id (ObjectId) */\n  cid: Scalars['String'];\n  /** To filter or not */\n  filter: Scalars['Boolean'];\n  /** Content */\n  text: Scalars['String'];\n};\n\n/** editVideoTagIds required parameters */\nexport type EditVideoTagIdsParameters = {\n  /** One of 'replace', 'append', 'remove' */\n  editBehaviour: Scalars['String'];\n  /** Behaviour if a tag does not exist, one of 'ignore', 'error', default 'ignore' */\n  notFoundBehaviour?: InputMaybe<Scalars['String']>;\n  /** Tags */\n  tags: Array<Scalars['Int']>;\n  /** User language used for adding tags, default is 'ENG' */\n  userLanguage?: InputMaybe<Scalars['String']>;\n  /** Video ID */\n  videoId: Scalars['String'];\n};\n\n/** editVideoTags required parameters */\nexport type EditVideoTagsParameters = {\n  /** One of 'replace', 'append', 'remove' */\n  editBehaviour: Scalars['String'];\n  /** Behaviour if a tag does not exist, one of 'ignore', 'error', 'append', default 'ignore' */\n  notFoundBehaviour?: InputMaybe<Scalars['String']>;\n  /** Tags */\n  tags: Array<Scalars['String']>;\n  /** User language used for adding tags, default is 'ENG' */\n  userLanguage?: InputMaybe<Scalars['String']>;\n  /** Video ID */\n  videoId: Scalars['String'];\n};\n\nexport type EmptyJson = {\n  __typename: 'EmptyJSON';\n  /** Always not present */\n  empty?: Maybe<Scalars['Int']>;\n};\n\n/** getTagsBatch required parameters */\nexport type GetAuthorParameters = {\n  /** Tag ID */\n  tagid: Scalars['Int'];\n};\n\n/** required parameters for get playlist */\nexport type GetPlaylistParameters = {\n  /** ID of playlist */\n  pid: Scalars['String'];\n};\n\n/** GetPopularTags parameters */\nexport type GetPopularTagsParameters = {\n  count?: InputMaybe<Scalars['Int']>;\n  /** Language, default 'ENG' */\n  lang?: InputMaybe<Scalars['String']>;\n};\n\nexport type GetPopularTagsResult = {\n  __typename: 'GetPopularTagsResult';\n  popularTags?: Maybe<Array<TagWithPopularity>>;\n};\n\n/** required parameters for get user */\nexport type GetRatingParameters = {\n  /** ID of playlist */\n  pid?: InputMaybe<Scalars['String']>;\n  /** ID of video */\n  vid?: InputMaybe<Scalars['String']>;\n};\n\n/** GetRelatedVideo required parameters */\nexport type GetRelatedVideoParameters = {\n  sortTitle?: InputMaybe<Scalars['Boolean']>;\n  topK?: InputMaybe<Scalars['Int']>;\n  vid: Scalars['String'];\n};\n\n/** getTagsBatch required parameters */\nexport type GetTagObjectsBatchParameters = {\n  /** Tag IDs */\n  tagid: Array<Scalars['Int']>;\n};\n\n/** required parameters for viewing a thread */\nexport type GetThreadParameters = {\n  /** ID of thread */\n  threadId: Scalars['String'];\n};\n\n/** required parameters for get user */\nexport type GetUserParameters = {\n  /** ID of user */\n  uid: Scalars['String'];\n};\n\n/** listVideo required parameters */\nexport type GetVideoParameters = {\n  /** Language */\n  lang: Scalars['String'];\n  /** Video ID */\n  vid: Scalars['String'];\n};\n\nexport type LeaderboardResult = {\n  __typename: 'LeaderboardResult';\n  items: Array<LeaderboardResultItem>;\n};\n\nexport type LeaderboardResultItem = {\n  __typename: 'LeaderboardResultItem';\n  count: Scalars['Int'];\n  user: User;\n};\n\n/** listAdjacentVideos required parameters */\nexport type ListAdjacentVideosParameters = {\n  /** k */\n  k?: InputMaybe<Scalars['Int']>;\n  /** Playlist ID */\n  pid: Scalars['String'];\n  /** Rank to find against */\n  rank?: InputMaybe<Scalars['Int']>;\n  vid?: InputMaybe<Scalars['String']>;\n};\n\n/** list notifications result */\nexport type ListNotificationGqlResult = {\n  __typename: 'ListNotificationGQLResult';\n  count: Scalars['Int'];\n  countAll: Scalars['Int'];\n  countUnread: Scalars['Int'];\n  notes: Array<BaseNotificationObject | ReplyNotificationObject | SystemNotificationObject>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\n/** list notifications required parameters */\nexport type ListNotificationParameters = {\n  limit?: InputMaybe<Scalars['Int']>;\n  /** Whether or not to list all notifications, default only list unread */\n  listAll?: InputMaybe<Scalars['Boolean']>;\n  /** Type of notification to list, one of 'all', 'forum_reply', 'comment_reply', 'system_message', 'dm', 'post_result', default is 'all' */\n  noteType?: InputMaybe<Scalars['String']>;\n  offset?: InputMaybe<Scalars['Int']>;\n};\n\n/** listPlaylist required parameters */\nexport type ListPlaylistParameters = {\n  additionalConstraint?: InputMaybe<Scalars['String']>;\n  /** Num of item in a page */\n  limit?: InputMaybe<Scalars['Int']>;\n  /** Offset (start from 0) */\n  offset?: InputMaybe<Scalars['Int']>;\n  /** List order, one of 'latest', 'oldest', 'last_modified' */\n  order?: InputMaybe<Scalars['String']>;\n  /** Query */\n  query?: InputMaybe<Scalars['String']>;\n};\n\nexport type ListPlaylistResult = {\n  __typename: 'ListPlaylistResult';\n  count: Scalars['Int'];\n  pageCount: Scalars['Int'];\n  playlists: Array<Playlist>;\n};\n\n/** list subscripted videos required parameters */\nexport type ListSubscriptionVideosParameters = {\n  additionalConstraint?: InputMaybe<Scalars['String']>;\n  /** If true, no placeholder items will be shown */\n  hidePlaceholder?: InputMaybe<Scalars['Boolean']>;\n  /** User language */\n  lang?: InputMaybe<Scalars['String']>;\n  /** Num of item in a page */\n  limit?: InputMaybe<Scalars['Int']>;\n  /** Offset (start from 0) */\n  offset?: InputMaybe<Scalars['Int']>;\n  /** List order, one of 'latest', 'oldest', 'video_latest', 'video_oldest', 'last_modified' */\n  order?: InputMaybe<Scalars['String']>;\n  /** Visible subscriptions, list of obejctid */\n  visible?: InputMaybe<Array<Scalars['String']>>;\n};\n\nexport type ListSubscriptionVideosResult = {\n  __typename: 'ListSubscriptionVideosResult';\n  count: Scalars['Int'];\n  relatedTags?: Maybe<Array<AuthorTagObject | RegularTagObject>>;\n  /** Return subscriptions used */\n  subscriptions: Array<PvSubscription>;\n  videos: Array<Video>;\n};\n\n/** required parameters for listing tags */\nexport type ListTagParameters = {\n  /** Category */\n  category?: InputMaybe<Scalars['String']>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  /** Order, one of 'latest', 'oldest', 'count', 'count_inv' */\n  order?: InputMaybe<Scalars['String']>;\n  /** Query */\n  query?: InputMaybe<Scalars['String']>;\n  /** Use regex for query if exists and true, otherwise wildcard query will be used */\n  queryRegex?: InputMaybe<Scalars['Boolean']>;\n};\n\nexport type ListTagsResult = {\n  __typename: 'ListTagsResult';\n  count: Scalars['Int'];\n  pageCount: Scalars['Int'];\n  tags: Array<AuthorTagObject | RegularTagObject>;\n};\n\n/** list unread notifications count result */\nexport type ListUnreadNotificationCountGqlResult = {\n  __typename: 'ListUnreadNotificationCountGQLResult';\n  list: Array<ListUnreadNotificationCountGqlResultItem>;\n};\n\n/** list unread notifications count result item */\nexport type ListUnreadNotificationCountGqlResultItem = {\n  __typename: 'ListUnreadNotificationCountGQLResultItem';\n  /** Number of unread note messages of this type */\n  count: Scalars['Int'];\n  /** Note message type */\n  msgtype: Scalars['String'];\n};\n\n/** listVideo required parameters */\nexport type ListVideoParameters = {\n  additionalConstraint?: InputMaybe<Scalars['String']>;\n  /** If true, no placeholder items will be shown */\n  hidePlaceholder?: InputMaybe<Scalars['Boolean']>;\n  /** Add tags_readable field to every result item */\n  humanReadableTag?: InputMaybe<Scalars['Boolean']>;\n  /** User language */\n  lang?: InputMaybe<Scalars['String']>;\n  /** Num of item in a page */\n  limit?: InputMaybe<Scalars['Int']>;\n  /** Offset (start from 0) */\n  offset?: InputMaybe<Scalars['Int']>;\n  /** List order, one of 'latest', 'oldest', 'video_latest', 'video_oldest', 'last_modified' */\n  order?: InputMaybe<Scalars['String']>;\n  /** Query type, one of tag, text */\n  qtype?: InputMaybe<Scalars['String']>;\n  /** Query */\n  query?: InputMaybe<Scalars['String']>;\n};\n\nexport type ListVideoResult = {\n  __typename: 'ListVideoResult';\n  count: Scalars['Int'];\n  pageCount: Scalars['Int'];\n  popularTags?: Maybe<Array<TagWithPopularity>>;\n  relatedTags?: Maybe<Array<AuthorTagObject | RegularTagObject>>;\n  /** Time used to complete this query in ms */\n  timeUsedMs: Scalars['Int'];\n  videos: Array<Video>;\n};\n\n/** mark notifications read parameters */\nexport type MarkNotificationsReadParameters = {\n  /** Whether to mark all as read or not */\n  markAll?: InputMaybe<Scalars['Boolean']>;\n  /** List of note IDs to mark as read, if present then `mark_all` shall not be set */\n  noteIds?: InputMaybe<Array<Scalars['String']>>;\n  /** Specify a type of note to mark all as read, only applicable when `mark_all` is set */\n  noteType?: InputMaybe<Scalars['String']>;\n};\n\nexport type Meta = {\n  __typename: 'Meta';\n  createdAt: Scalars['UtcDateTime'];\n  createdBy?: Maybe<User>;\n  modifiedAt?: Maybe<Scalars['UtcDateTime']>;\n  modifiedBy?: Maybe<User>;\n};\n\n/** MultilingualMapping */\nexport type MultilingualMapping = {\n  __typename: 'MultilingualMapping';\n  lang: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename: 'Mutation';\n  apiVersion: Scalars['String'];\n  associateWithPvUser: Scalars['Boolean'];\n  batchPostVideo: BatchPostVideoResult;\n  delComment: Scalars['Boolean'];\n  disassociateWithPvUser: Scalars['Boolean'];\n  editComment: Scalars['Boolean'];\n  editVideoTagIds: Array<AuthorTagObject | RegularTagObject>;\n  editVideoTags: Array<AuthorTagObject | RegularTagObject>;\n  hideComment: Scalars['Boolean'];\n  markAsRead: EmptyJson;\n  pinComment: Scalars['Boolean'];\n  postComment: PostCommentResponse;\n  postReply: Scalars['Boolean'];\n  postVideo: PostVideoResult;\n  sendDM: EmptyJson;\n  serverDate: Scalars['DateTimeUtc'];\n  setVideoClearence: Scalars['Int'];\n};\n\n\nexport type Mutation_AssociateWithPvUserArgs = {\n  para: PvUserAssociationParameters;\n};\n\n\nexport type Mutation_BatchPostVideoArgs = {\n  para: BatchPostVideoRequestData;\n};\n\n\nexport type Mutation_DelCommentArgs = {\n  cid: Scalars['String'];\n};\n\n\nexport type Mutation_DisassociateWithPvUserArgs = {\n  para: PvUserAssociationParameters;\n};\n\n\nexport type Mutation_EditCommentArgs = {\n  para: EditCommentParameters;\n};\n\n\nexport type Mutation_EditVideoTagIdsArgs = {\n  para: EditVideoTagIdsParameters;\n};\n\n\nexport type Mutation_EditVideoTagsArgs = {\n  para: EditVideoTagsParameters;\n};\n\n\nexport type Mutation_HideCommentArgs = {\n  cid: Scalars['String'];\n};\n\n\nexport type Mutation_MarkAsReadArgs = {\n  para: MarkNotificationsReadParameters;\n};\n\n\nexport type Mutation_PinCommentArgs = {\n  cid: Scalars['String'];\n  pin: Scalars['Boolean'];\n};\n\n\nexport type Mutation_PostCommentArgs = {\n  para: PostCommentParameters;\n};\n\n\nexport type Mutation_PostReplyArgs = {\n  para: PostReplyParameters;\n};\n\n\nexport type Mutation_PostVideoArgs = {\n  para: PostVideoRequestData;\n};\n\n\nexport type Mutation_SendDmArgs = {\n  para: SendDmParameters;\n};\n\n\nexport type Mutation_SetVideoClearenceArgs = {\n  para: SetVideoClearenceParameters;\n};\n\nexport type NotificationObject = {\n  id: Scalars['ObjectId'];\n  /** If this notification has been read */\n  read: Scalars['Boolean'];\n  time: Scalars['UtcDateTime'];\n  type: Scalars['String'];\n};\n\nexport type PvSubscription = {\n  __typename: 'PVSubscription';\n  id: Scalars['ObjectId'];\n  meta: Meta;\n  /** Name of this query */\n  name?: Maybe<Scalars['String']>;\n  /** Query */\n  query: Scalars['String'];\n  /** Query type, one of 'tag', 'text' */\n  queryType: Scalars['String'];\n};\n\nexport type Playlist = {\n  __typename: 'Playlist';\n  clearence: Scalars['Int'];\n  commentThread?: Maybe<Thread>;\n  /** If current user can edit this playlist */\n  editable?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ObjectId'];\n  /** Playlist metadata */\n  item: PlaylistMeta;\n  /** Metadata (created_at etc.) */\n  meta: Meta;\n  /** If current user can edit or delete this playlist */\n  owner?: Maybe<Scalars['Boolean']>;\n  rating?: Maybe<Rating>;\n  tagByCategory: Array<TagCategoryItem>;\n  tagIds: Array<Scalars['Int']>;\n  tags: Array<AuthorTagObject | RegularTagObject>;\n  videos: Array<Video>;\n};\n\n\nexport type Playlist_TagByCategoryArgs = {\n  lang?: InputMaybe<Scalars['String']>;\n};\n\n\nexport type Playlist_VideosArgs = {\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n};\n\nexport type PlaylistContentForVideo = {\n  __typename: 'PlaylistContentForVideo';\n  /** List previous and next K videos */\n  adjacentVideos: Array<VideoRank>;\n  id: Scalars['ObjectId'];\n  /** Playlist's metadata */\n  meta: PlaylistMeta;\n  /** Next video */\n  next?: Maybe<Video>;\n  /** Get the actual playlist */\n  playlist: Playlist;\n  /** Previous video */\n  prev?: Maybe<Video>;\n  /** Video's position in playlist */\n  rank: Scalars['Int'];\n};\n\n\nexport type PlaylistContentForVideo_AdjacentVideosArgs = {\n  k?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type PlaylistContentForVideo_NextArgs = {\n  lang: Scalars['String'];\n};\n\n\nexport type PlaylistContentForVideo_PrevArgs = {\n  lang: Scalars['String'];\n};\n\nexport type PlaylistMeta = {\n  __typename: 'PlaylistMeta';\n  count: Scalars['Int'];\n  cover: Scalars['String'];\n  desc: Scalars['String'];\n  private: Scalars['Boolean'];\n  privateEdit: Scalars['Boolean'];\n  title: Scalars['String'];\n};\n\n/** required parameters posting a comment */\nexport type PostCommentParameters = {\n  /** Type of comment */\n  commentType: CommentType;\n  /** Content */\n  content: Scalars['String'];\n  /** To filter or not */\n  filter: Scalars['Boolean'];\n  /** Target vid, pid or comment_id (ObjectId) */\n  targetId: Scalars['String'];\n};\n\nexport type PostCommentResponse = {\n  __typename: 'PostCommentResponse';\n  commentId: Scalars['ObjectId'];\n  thread: Thread;\n};\n\n/** required parameters for posting a reply */\nexport type PostReplyParameters = {\n  /** To filter or not */\n  filter: Scalars['Boolean'];\n  /** Target comment_id (ObjectId) */\n  replyTo: Scalars['String'];\n  /** Content */\n  text: Scalars['String'];\n};\n\n/** PostVideo data */\nexport type PostVideoRequestData = {\n  /** Reference to another copy, in video ObjectId format */\n  copy?: InputMaybe<Scalars['String']>;\n  /** Playlist ID if you want to add this video to a playlist */\n  pid?: InputMaybe<Scalars['String']>;\n  /** Rank of video in the playlist you are inserting into, default to last position */\n  rank?: InputMaybe<Scalars['Int']>;\n  /** Type of repost, one of 'official', 'official_repost', 'authorized_translation', 'authorized_repost', 'translation', 'repost', 'unknown' */\n  repostType?: InputMaybe<Scalars['String']>;\n  /** Behaviour of tags if this video already exists, one of 'merge', 'keep_existing', default 'merge' */\n  tagMergeBehaviour?: InputMaybe<Scalars['String']>;\n  /** Video tags */\n  tags: Array<Scalars['String']>;\n  /** Video URL */\n  url: Scalars['String'];\n};\n\nexport type PostVideoResult = {\n  __typename: 'PostVideoResult';\n  taskId: Scalars['String'];\n};\n\n/** getTagsBatch required parameters */\nexport type PvUserAssociationParameters = {\n  /** Tag ID */\n  tagid: Scalars['Int'];\n  /** PatchyVideo User ID */\n  uid: Scalars['String'];\n};\n\nexport type Query = {\n  __typename: 'Query';\n  apiVersion: Scalars['String'];\n  getAuthor: Author;\n  getLeaderboard: LeaderboardResult;\n  getPlaylist: Playlist;\n  getPopularTags: GetPopularTagsResult;\n  getRating?: Maybe<Rating>;\n  getRelatedVideo: Array<Video>;\n  getStats: Stats;\n  getTagObjects: Array<AuthorTagObject | RegularTagObject>;\n  getThread: Thread;\n  getUser: User;\n  getVideo: Video;\n  listAdjacentVideos: Array<VideoRank>;\n  listNotifications: ListNotificationGqlResult;\n  listPlaylist: ListPlaylistResult;\n  listSubscriptionVideos: ListSubscriptionVideosResult;\n  listSubscriptionVideosRandomized: ListSubscriptionVideosResult;\n  listSubscriptions: Array<PvSubscription>;\n  listTagObjects: ListTagsResult;\n  listUnreadNotificationsCount: ListUnreadNotificationCountGqlResult;\n  listVideo: ListVideoResult;\n  whoami: Scalars['String'];\n};\n\n\nexport type Query_GetAuthorArgs = {\n  para: GetAuthorParameters;\n};\n\n\nexport type Query_GetLeaderboardArgs = {\n  hrs: Scalars['Int'];\n  k: Scalars['Int'];\n};\n\n\nexport type Query_GetPlaylistArgs = {\n  para: GetPlaylistParameters;\n};\n\n\nexport type Query_GetPopularTagsArgs = {\n  para: GetPopularTagsParameters;\n};\n\n\nexport type Query_GetRatingArgs = {\n  para: GetRatingParameters;\n};\n\n\nexport type Query_GetRelatedVideoArgs = {\n  para: GetRelatedVideoParameters;\n};\n\n\nexport type Query_GetTagObjectsArgs = {\n  para: GetTagObjectsBatchParameters;\n};\n\n\nexport type Query_GetThreadArgs = {\n  para: GetThreadParameters;\n};\n\n\nexport type Query_GetUserArgs = {\n  para: GetUserParameters;\n};\n\n\nexport type Query_GetVideoArgs = {\n  para: GetVideoParameters;\n};\n\n\nexport type Query_ListAdjacentVideosArgs = {\n  para: ListAdjacentVideosParameters;\n};\n\n\nexport type Query_ListNotificationsArgs = {\n  para: ListNotificationParameters;\n};\n\n\nexport type Query_ListPlaylistArgs = {\n  para: ListPlaylistParameters;\n};\n\n\nexport type Query_ListSubscriptionVideosArgs = {\n  para: ListSubscriptionVideosParameters;\n};\n\n\nexport type Query_ListSubscriptionVideosRandomizedArgs = {\n  para: ListSubscriptionVideosParameters;\n};\n\n\nexport type Query_ListTagObjectsArgs = {\n  para: ListTagParameters;\n};\n\n\nexport type Query_ListVideoArgs = {\n  para: ListVideoParameters;\n};\n\nexport type Rating = {\n  __typename: 'Rating';\n  totalRating: Scalars['Int'];\n  totalUser: Scalars['Int'];\n  userRating?: Maybe<Scalars['Int']>;\n};\n\n/** RegularTagObject */\nexport type RegularTagObject = TagObject & {\n  __typename: 'RegularTagObject';\n  alias: Array<Scalars['String']>;\n  category: TagCategoryEnum;\n  count: Scalars['Int'];\n  id: Scalars['ObjectId'];\n  isAuthor: Scalars['Boolean'];\n  languages: Array<MultilingualMapping>;\n  meta: Meta;\n  tagid: Scalars['Int'];\n};\n\n/** NotificationObject for reply */\nexport type ReplyNotificationObject = NotificationObject & {\n  __typename: 'ReplyNotificationObject';\n  /** Comment ID */\n  cid: Scalars['ObjectId'];\n  content: Scalars['String'];\n  id: Scalars['ObjectId'];\n  read: Scalars['Boolean'];\n  repliedBy: User;\n  /** Link to thread */\n  repliedObj: Scalars['ObjectId'];\n  /** One of 'forum', 'video', 'playlist' */\n  repliedType: Scalars['String'];\n  time: Scalars['UtcDateTime'];\n  type: Scalars['String'];\n};\n\n/** send DM parameters */\nexport type SendDmParameters = {\n  /** Content */\n  content: Scalars['String'];\n  /** Target user's uid */\n  dstUser: Scalars['String'];\n};\n\n/** SetVideoClearence required parameters */\nexport type SetVideoClearenceParameters = {\n  /** Clearence, one of 0, 1, 2, 3, default is 0 */\n  clearence?: InputMaybe<Scalars['Int']>;\n  /** Video ID */\n  vid: Scalars['String'];\n};\n\nexport type Stats = {\n  __typename: 'Stats';\n  topTags?: Maybe<Array<TagWithPopularity>>;\n  /** Num of users */\n  users: Scalars['Int'];\n};\n\nexport type Subscription = {\n  __typename: 'Subscription';\n  apiVersion: Scalars['String'];\n  serverDate: Scalars['DateTimeUtc'];\n};\n\n/** system NotificationObject */\nexport type SystemNotificationObject = NotificationObject & {\n  __typename: 'SystemNotificationObject';\n  content: Scalars['String'];\n  id: Scalars['ObjectId'];\n  read: Scalars['Boolean'];\n  relatedLink?: Maybe<Scalars['String']>;\n  time: Scalars['UtcDateTime'];\n  title: Scalars['String'];\n  type: Scalars['String'];\n};\n\nexport enum TagCategoryEnum {\n  Author = 'AUTHOR',\n  Character = 'CHARACTER',\n  Copyright = 'COPYRIGHT',\n  General = 'GENERAL',\n  Language = 'LANGUAGE',\n  Meta = 'META',\n  Soundtrack = 'SOUNDTRACK'\n}\n\n/** TagCategoryItem */\nexport type TagCategoryItem = {\n  __typename: 'TagCategoryItem';\n  key: TagCategoryEnum;\n  value: Array<Scalars['String']>;\n};\n\nexport type TagObject = {\n  alias: Array<Scalars['String']>;\n  category: TagCategoryEnum;\n  count: Scalars['Int'];\n  id: Scalars['ObjectId'];\n  isAuthor: Scalars['Boolean'];\n  languages: Array<MultilingualMapping>;\n  meta: Meta;\n  tagid: Scalars['Int'];\n};\n\n/** Tag with popularity */\nexport type TagWithPopularity = {\n  __typename: 'TagWithPopularity';\n  popluarity: Scalars['Int'];\n  tag: AuthorTagObject | RegularTagObject;\n};\n\nexport type Thread = {\n  __typename: 'Thread';\n  comments?: Maybe<Array<Comment>>;\n  /** Number of comment in this thread, includes deleted ones but not replies */\n  count: Scalars['Int'];\n  id: Scalars['ObjectId'];\n  /** Owner of this thread, for video/playlist the owner is the whoever created the video/playlist */\n  owner: User;\n  /** One of 'video', 'playlist', 'user', 'forum' */\n  threadType: Scalars['String'];\n};\n\nexport type User = {\n  __typename: 'User';\n  bindQq?: Maybe<Scalars['Boolean']>;\n  desc: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  gravatar?: Maybe<Scalars['String']>;\n  id: Scalars['ObjectId'];\n  image: Scalars['String'];\n  linkedTagidObject?: Maybe<AuthorTagObject | RegularTagObject>;\n  meta: Meta;\n  username: Scalars['String'];\n};\n\nexport type Video = {\n  __typename: 'Video';\n  clearence: Scalars['Int'];\n  commentThread?: Maybe<Thread>;\n  copies: Array<Video>;\n  id: Scalars['ObjectId'];\n  item: VideoItem;\n  meta: Meta;\n  playlists: Array<PlaylistContentForVideo>;\n  rating?: Maybe<Rating>;\n  relatedVideos: Array<Video>;\n  tagByCategory: Array<TagCategoryItem>;\n  tagCount: Scalars['Int'];\n  tagIds: Array<Scalars['Int']>;\n  tags: Array<AuthorTagObject | RegularTagObject>;\n  tagsReadable?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type Video_CopiesArgs = {\n  lang: Scalars['String'];\n};\n\n\nexport type Video_PlaylistsArgs = {\n  lang: Scalars['String'];\n};\n\n\nexport type Video_RelatedVideosArgs = {\n  sortTitle?: InputMaybe<Scalars['Boolean']>;\n  topK?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type Video_TagByCategoryArgs = {\n  lang: Scalars['String'];\n};\n\nexport type VideoItem = {\n  __typename: 'VideoItem';\n  cid?: Maybe<Scalars['String']>;\n  coverImage: Scalars['String'];\n  desc: Scalars['String'];\n  partName?: Maybe<Scalars['String']>;\n  placeholder?: Maybe<Scalars['Boolean']>;\n  rating: Scalars['Float'];\n  repostType: Scalars['String'];\n  site: Scalars['String'];\n  thumbnailUrl: Scalars['String'];\n  title: Scalars['String'];\n  uniqueId: Scalars['String'];\n  uploadTime: Scalars['UtcDateTime'];\n  url: Scalars['String'];\n  userSpaceUrls?: Maybe<Array<Scalars['String']>>;\n  utags: Array<Scalars['String']>;\n  views: Scalars['Int'];\n};\n\n/** VideoRank */\nexport type VideoRank = {\n  __typename: 'VideoRank';\n  rank: Scalars['Int'];\n  video: Video;\n};\n","import MarkdownIt from 'markdown-it'\n\nimport { facePlugin } from './parserCommon'\n\nconst markdownIt = new MarkdownIt({\n  html: false,\n  breaks: true,\n  linkify: true,\n}).use(facePlugin)\n\nmarkdownIt.block.ruler.enableOnly(['paragraph'])\n\nexport function render(src: string): string {\n  let res\n  try {\n    res = markdownIt.render(src.replace(/\\[\\[表情:(\\p{L}+)\\]\\]/gu, '[[face' /* escape unocss */ + ':$1]]'), {\n      last: [],\n    })\n  }\n  catch (e) {\n    console.error(e)\n    res = `<div class=\"font-mono\">Error throwed from Markdown parser: ${e}<br />${\n      e instanceof Error && e.stack ? e.stack.replaceAll('\\n', '<br />') : String(e)\n    }</div>`\n  }\n  return res\n}\n","<!-- eslint-disable vue/no-v-html -->\n<template>\n  <div class=\"overflow-hidden\">\n    <div class=\"-my-24\">\n      <article\n        ref=\"root\"\n        class=\"prose dark:prose-invert break-all my-24\"\n        :class=\"{ 'text-sm': size === 'sm', 'text-lg': size === 'lg', 'text-xl': size === 'xl' }\"\n        v-html=\"html\"\n      />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { nextTick, ref, shallowRef, watch } from 'vue'\nimport { useIntersectionObserver } from '@vueuse/core'\nimport { render } from '../libs/parserComment'\n\nconst props = withDefaults(\n  defineProps<{\n    text: string\n    size?: string\n  }>(),\n  {\n    size: '',\n  },\n)\nconst emit = defineEmits<{\n  (event: 'htmlChanged'): void\n}>()\n\nconst html = ref('')\nconst waitingForRender = ref(true)\nwatch(props, (p, op) => {\n  if (p.text !== op.text)\n    waitingForRender.value = true\n})\nconst root = shallowRef<HTMLElement | null>(null)\nuseIntersectionObserver(\n  root,\n  ([{ isIntersecting }]) => {\n    if (isIntersecting && waitingForRender.value) {\n      html.value = render(props.text)\n      nextTick(() => emit('htmlChanged'))\n      waitingForRender.value = false\n    }\n  },\n  { rootMargin: '400px 400px 400px 400px' },\n)\n</script>\n\n<style lang=\"postcss\" scoped>\n@import 'highlight.js/styles/github.css';\n.prose {\n  max-width: inherit;\n}\n</style>\n","<template>\n  <div class=\"w-full max-w-75ch rounded border border-gray-300 dark:border-gray-600 overflow-hidden\">\n    <div\n      class=\"flex flex-row flex-nowrap justify-between items-center px-1 py-0.5 w-full text-sm border-b border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-800\"\n    >\n      <div class=\"flex flex-row flex-nowrap items-center text-gray-800 dark:text-gray-300\">\n        富文本编辑正在制作中\n      </div>\n      <div class=\"flex flex-row flex-nowrap items-center\">\n        <button @click=\"togglePreview\" v-text=\"enablePreview ? '编辑' : '预览'\" />\n      </div>\n    </div>\n    <div v-show=\"!enablePreview\" class=\"w-full p-0.5 -my-24\">\n      <div\n        ref=\"inputEl\"\n        class=\"prose dark:prose-invert break-all min-h-24 my-24 focus-visible:outline-none\"\n        contenteditable=\"true\"\n        @input=\"onInput\"\n      />\n    </div>\n    <MarkdownCommentBlock v-if=\"enablePreview && inputEl\" class=\"p-0.5\" :text=\"inputContent\" />\n    <div\n      class=\"px-1 py-0.5 w-full text-xs text-gray-700 dark:text-gray-300 border-t border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-800\"\n    >\n      请遵守<a\n        class=\"text-blue-600 dark:text-blue-500\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://patchyvideo.wiki/zh/Comments\"\n      >评论规则</a>！评论区支持部分 Markdown 语法，点击右上角的预览按钮预览渲染效果。\n    </div>\n  </div>\n  <form class=\"flex flex-row items-center gap-2 mt-1\" @submit.prevent=\"onSubmit\" @reset.prevent=\"onReset\">\n    <button\n      type=\"submit\"\n      class=\"px-4 py-1 rounded-md text-purple-800 dark:text-white border-2 border-purple-300 dark:border-indigo-700\"\n    >\n      发表\n    </button>\n    <button type=\"reset\" class=\"px-4 py-1 rounded-md border-2 border-gray-300 dark:border-gray-600\">\n      清空\n    </button>\n    <div v-if=\"postingComment\">\n      <i class=\"i-uil:spinner-alt animate-spin\" />正在发表评论……\n    </div>\n    <div v-if=\"postingCommentError\">\n      评论发表失败：{{ postingCommentError }}\n    </div>\n  </form>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref } from 'vue'\nimport MarkdownCommentBlock from '@/markdown/components/MarkdownCommentBlock.vue'\nimport type { Mutation } from '@/graphql'\nimport { gql, useMutation } from '@/graphql'\nimport { CommentType } from '@/graphql/__generated__/graphql'\nimport { useAuth } from '@/user'\n\nconst props = defineProps<{\n  videoId?: string\n  playlistId?: string\n}>()\nconst emit = defineEmits<{\n  (event: 'refetchThread', tid: string): void\n}>()\n\nconst auth = useAuth()\n\n// submit mutation\nconst commentParentType = computed(() =>\n  props.videoId ? CommentType.Video : props.playlistId ? CommentType.Playlist : null,\n)\nconst commentParentId = computed(() => props.videoId ?? props.playlistId ?? null)\nconst { mutate: mutatePostComment } = useMutation<Mutation>(gql`\n  mutation ($type: CommentType!, $id: String!, $content: String!) {\n    postComment(para: { commentType: $type, targetId: $id, content: $content, filter: false }) {\n      commentId\n      thread {\n        id\n      }\n    }\n  }\n`)\n\n// comment input\nconst inputEl = ref<HTMLDivElement | null>(null)\nconst inputContent = ref('')\nconst onInput = () => {\n  if (!inputEl.value)\n    return\n  // TODO read html\n  // inputContent.value = inputEl.value.innerHTML\n  inputContent.value = inputEl.value.innerText\n}\nconst onReset = () => {\n  if (!inputEl.value)\n    return\n  inputEl.value.innerHTML = ''\n  inputContent.value = ''\n}\nconst postingComment = ref(false)\nconst postingCommentError = ref('')\nconst onSubmit = async () => {\n  // reject if not login\n  if (!auth.isLogin)\n    return\n  // reject if no content provided\n  if (!inputContent.value)\n    return\n  // reject if the comment thread parent id isn't provided\n  if (!commentParentId.value)\n    return\n\n  postingComment.value = true\n  const res = await mutatePostComment({\n    type: commentParentType.value!,\n    id: commentParentId.value,\n    content: inputContent.value,\n  }).catch((e) => {\n    postingComment.value = false\n    postingCommentError.value = String(e)\n  })\n  postingComment.value = false\n\n  // failed\n  if (!res?.data?.postComment.commentId)\n    return\n\n  // success\n  onReset()\n  emit('refetchThread', res.data.postComment.thread.id.toHexString())\n}\n\n// preview\nconst enablePreview = ref(false)\nconst togglePreview = () => {\n  if (!inputEl.value)\n    return\n  enablePreview.value = !enablePreview.value\n}\n</script>\n","<template>\n  <!-- Video Comments -->\n  <div class=\"mx-1 md:mx-2 lg:mx-4\">\n    <template v-if=\"loadingThread && !threadDisabled\">\n      正在加载评论区<i class=\"i-uil:spinner-alt text-lg animate-spin\" />\n    </template>\n    <template v-else>\n      共 {{ commentThread?.count || 0 }} 条评论\n    </template>\n  </div>\n  <div v-if=\"auth.isLogin && screenSizes.md\" class=\"flex flex-row flex-nowrap py-2\">\n    <div class=\"flex-none mx-2\">\n      <UserAvatar\n        class=\"inline-block w-8 md:w-12 h-8 md:h-12 rounded-full object-cover\"\n        :image=\"auth.image\"\n        :email=\"auth.email\"\n        :alt=\"auth.username\"\n        hide-title\n      />\n    </div>\n    <div class=\"flex-1\">\n      <div>\n        <span class=\"text-sm font-medium\" v-text=\"auth.username\" /><span class=\"text-xs text-gray-500 dark:text-gray-400\"><span class=\"ml-1.5\">发表一条友善的评论</span></span>\n      </div>\n      <CommentPost :video-id=\"videoId\" :playlist-id=\"playlistId\" @refetch-thread=\"onRefetchThread\" />\n    </div>\n  </div>\n  <div v-for=\"comment in comments\" :key=\"comment.id.toHexString()\" class=\"py-2\">\n    <div class=\"flex flex-row flex-nowrap\">\n      <div class=\"flex-none mx-2\">\n        <RouterLink :to=\"`/user/${comment.meta.createdBy.id.toHexString()}`\">\n          <UserAvatarPopper :uid=\"comment.meta.createdBy.id.toHexString()\">\n            <UserAvatar\n              class=\"inline-block w-8 md:w-12 h-8 md:h-12 rounded-full object-cover\"\n              :image=\"comment.meta.createdBy.image\"\n              :gravatar=\"comment.meta.createdBy.gravatar\"\n              :alt=\"comment.meta.createdBy.username\"\n              hide-title\n            />\n          </UserAvatarPopper>\n        </RouterLink>\n        <div\n          v-if=\"comment.children?.length ?? 0 > 0\"\n          class=\"w-px h-[calc(100%-2rem)] mt-1 mx-auto bg-gray-300 dark:bg-gray-700\"\n        />\n      </div>\n      <div>\n        <div>\n          <RouterLink :to=\"`/user/${comment.meta.createdBy.id.toHexString()}`\">\n            <span class=\"text-sm font-medium\" v-text=\"comment.meta.createdBy.username\" />\n          </RouterLink>\n          <span class=\"text-xs text-gray-500 dark:text-gray-300\">\n            <Suspense><RelativeDate class=\"ml-1.5\" :date=\"comment.meta.createdAt\" /></Suspense>\n            <span v-if=\"comment.edited\" class=\"ml-1.5\">edited</span>\n          </span>\n        </div>\n        <div\n          v-if=\"commentHiddenOverrides[comment.id.toHexString()] ?? comment.hidden\"\n          class=\"min-h-6 text-gray-600 dark:text-gray-400\"\n        >\n          此评论已被折叠\n          <span\n            class=\"text-blue-500 dark:text-blue-600 cursor-pointer\"\n            @click=\"() => commentHiddenOverrides[comment.id.toHexString()] = false\"\n          >显示评论</span>\n        </div>\n        <MarkdownCommentBlock v-else class=\"min-h-6\" :text=\"comment.content\" size=\"md\" />\n      </div>\n    </div>\n    <div\n      v-for=\"(child, cindex) in comment.children\n        ? sliceCommentChildren(comment.id.toHexString(), comment.children)\n        : undefined\"\n      :key=\"child.id.toHexString()\"\n      class=\"flex flex-row flex-nowrap\"\n    >\n      <div class=\"flex-none w-10 md:w-14\">\n        <div class=\"flex flex-row w-full h-full ml-6 md:ml-8\">\n          <div\n            v-if=\"comment.children!.length > 3 || cindex !== comment.children!.length! - 1\"\n            class=\"w-px h-full bg-gray-300 dark:bg-gray-700\"\n          />\n          <div\n            v-else\n            class=\"w-px bg-gray-300 dark:bg-gray-700\"\n            :class=\"isCommentChildrenCollapsed(comment) ? 'h-3' : 'h-5'\"\n          />\n          <div\n            class=\"w-3 md:w-5 h-px bg-gray-300 dark:bg-gray-700\"\n            :class=\"isCommentChildrenCollapsed(comment) ? 'mt-3' : 'mt-5'\"\n          />\n        </div>\n      </div>\n      <div v-if=\"!isCommentChildrenCollapsed(comment)\" class=\"flex-none mt-1 mr-2\">\n        <RouterLink :to=\"`/user/${child.meta.createdBy.id.toHexString()}`\">\n          <UserAvatarPopper :uid=\"child.meta.createdBy.id.toHexString()\">\n            <UserAvatar\n              class=\"inline-block w-8 h-8 rounded-full object-cover\"\n              :image=\"child.meta.createdBy.image\"\n              :gravatar=\"child.meta.createdBy.gravatar\"\n              :alt=\"child.meta.createdBy.username\"\n              hide-title\n            />\n          </UserAvatarPopper>\n        </RouterLink>\n      </div>\n      <div class=\"flex\" :class=\"{ 'flex-col': !isCommentChildrenCollapsed(comment) }\">\n        <div v-if=\"isCommentChildrenCollapsed(comment)\" class=\"mr-1\">\n          <RouterLink :to=\"`/user/${child.meta.createdBy.id.toHexString()}`\">\n            <span class=\"text-sm font-medium\" v-text=\"child.meta.createdBy.username\" />\n          </RouterLink>:\n        </div>\n        <div v-else>\n          <RouterLink :to=\"`/user/${child.meta.createdBy.id.toHexString()}`\">\n            <span class=\"text-sm font-medium\" v-text=\"child.meta.createdBy.username\" />\n          </RouterLink><Suspense>\n            <RelativeDate class=\"text-xs text-gray-500 dark:text-gray-300 ml-2\" :date=\"child.meta.createdAt\" />\n          </Suspense>\n        </div>\n        <div\n          v-if=\"commentHiddenOverrides[comment.id.toHexString()] ?? comment.hidden\"\n          class=\"min-h-8 text-sm text-gray-600 dark:text-gray-400\"\n        >\n          此评论已被折叠\n          <span\n            class=\"text-blue-500 dark:text-blue-600 cursor-pointer\"\n            @click=\"() => commentHiddenOverrides[comment.id.toHexString()] = false\"\n          >显示评论</span>\n        </div>\n        <MarkdownCommentBlock v-else class=\"min-h-6\" :text=\"child.content\" size=\"sm\" />\n      </div>\n    </div>\n    <div\n      v-if=\"comment.children && comment.children.length > 3\"\n      class=\"flex flex-row flex-nowrap cursor-pointer\"\n      @click=\"\n        () => {\n          commentChildrenExpaneded[comment.id.toHexString()] = !commentChildrenExpaneded[comment.id.toHexString()]\n        }\n      \"\n    >\n      <div class=\"flex-none w-10 md:w-14\">\n        <div class=\"flex flex-row w-full h-full ml-6 md:ml-8\">\n          <div class=\"w-px h-3 bg-gray-300 dark:bg-gray-700\" />\n          <div class=\"mt-3 w-3 md:w-5 h-px bg-gray-300 dark:bg-gray-700\" />\n        </div>\n      </div>\n      <div\n        v-if=\"commentChildrenExpaneded[comment.id.toHexString()]\"\n        class=\"flex flex-row text-sm items-center text-blue-600 dark:text-blue-300\"\n      >\n        <div class=\"i-uil:arrow-to-bottom text-base transform rotate-180\" />\n        收起楼中楼\n      </div>\n      <div v-else class=\"flex flex-row text-sm items-center text-blue-600 dark:text-blue-300\">\n        <div class=\"i-uil:arrow-from-top text-base\" />\n        展开楼中楼\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, reactive, ref, watch } from 'vue'\nimport CommentPost from './CommentPost.vue'\nimport MarkdownCommentBlock from '@/markdown/components/MarkdownCommentBlock.vue'\nimport RelativeDate from '@/date-fns/components/RelativeDate.vue'\nimport UserAvatar from '@/user/components/UserAvatar.vue'\nimport UserAvatarPopper from '@/user/components/UserAvatarPopper.vue'\nimport type { Query, schema } from '@/graphql'\nimport { gql, useQuery, useResult } from '@/graphql'\nimport { screenSizes } from '@/css'\nimport { useAuth } from '@/user'\n\nconst props = defineProps<{\n  commentThreadId: string\n  videoId?: string\n  playlistId?: string\n}>()\n\nconst auth = useAuth()\n\nconst threadDisabled = computed(() => !props.commentThreadId)\nconst threadIdOverride = ref<string | null>(null)\nconst tid = computed(() => threadIdOverride.value ?? props.commentThreadId)\n\nconst {\n  result,\n  loading: loadingThread,\n  refetch: refetchThread,\n  start,\n  stop,\n} = useQuery<Query>(\n  gql`\n    query ($tid: String!) {\n      getThread(para: { threadId: $tid }) {\n        count\n        comments {\n          id\n          content\n          hidden\n          deleted\n          edited\n          meta {\n            createdAt\n            createdBy {\n              id\n              username\n              image\n              gravatar\n              desc\n            }\n          }\n          children {\n            id\n            content\n            hidden\n            deleted\n            edited\n            meta {\n              createdAt\n              createdBy {\n                id\n                username\n                image\n                gravatar\n                desc\n              }\n            }\n          }\n        }\n      }\n    }\n  `,\n  {\n    tid,\n  },\n  {\n    enabled: !threadDisabled.value,\n  },\n)\nwatch(threadDisabled, (n) => {\n  if (n)\n    stop()\n  else start()\n})\nconst commentThread = useResult(result, null, data => data?.getThread)\n\n// comments\ntype Comment = Omit<schema.Comment, 'content' | 'meta' | 'deleted' | 'children'> & {\n  content: NonNullable<schema.Comment['content']>\n  meta: schema.Meta & { createdBy: NonNullable<schema.Meta['createdBy']> }\n  deleted: false\n  children?: Comment[]\n}\nconst comments = computed(\n  () =>\n    (commentThread.value?.comments\n      // comment needs to have content & not be deleted\n      ?.filter(v => v.content && v.meta.createdBy && !v.deleted)\n      // filter children\n      .map(comment => ({\n        ...comment,\n        children: comment.children\n          // comment needs to have content & not be deleted\n          ?.filter(v => v.content && v.meta.createdBy && !v.deleted)\n          // sort by createdAt, latest first\n          .sort((a, b) => +b.meta.createdAt - +a.meta.createdAt),\n      }))\n      // filter out empty comments\n      .filter(v => !!v)\n      // sort by createdAt, latest first\n      .sort(\n        (a, b) => +b.meta.createdAt + (b.pinned ? 1 << 32 : 0) - (+a.meta.createdAt + (a.pinned ? 1 << 32 : 0)),\n      ) as Comment[]) ?? [],\n)\nconst commentChildrenExpaneded = reactive<Record<string, boolean>>({})\nconst sliceCommentChildren = (id: string, children: Comment[]) =>\n  commentChildrenExpaneded[id] ? children : children.slice(0, 3)\nconst isCommentChildrenCollapsed = (comment: Comment) =>\n  comment.children && comment.children.length > 3 && !commentChildrenExpaneded[comment.id.toHexString()]\nconst commentHiddenOverrides = reactive<Record<string, boolean>>({})\n\nconst onRefetchThread = (newThreadId: string) => {\n  if (newThreadId !== tid.value) {\n    // changing the variable will trigger a refetch, so no need to do a refetchThread here\n    threadIdOverride.value = newThreadId\n  }\n  else {\n    refetchThread()\n  }\n}\n</script>\n","<template>\n  <div\n    class=\"inline-flex px-2.5 text-base flex-row items-center gap-1 whitespace-nowrap rounded-full border-1 border-gray-400 dark:border-gray-600\"\n  >\n    <span class=\"inline-block w-2 h-2 rounded-full\" :class=\"catogoryMap[tagComp.category]\" />\n    <span v-text=\"tagComp.name\" />\n    <button\n      v-if=\"removeable\"\n      class=\"inline i-uil:times text-gray-600 dark:text-gray-400 hover:text-black\"\n      title=\"删除标签\"\n      @click=\"() => emit('remove')\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport type { schema } from '@/graphql'\nimport { behMostMatch } from '@/locales'\n\nconst props = defineProps<{\n  tag: Pick<schema.TagObject, 'category' | 'languages'>\n  removeable?: boolean\n}>()\nconst emit = defineEmits<{\n  (event: 'remove'): void\n}>()\n\nconst tagComp = computed(() => {\n  return {\n    category: props.tag.category.toLowerCase(),\n    name: behMostMatch(props.tag.languages).replace(/_/g, ' '),\n  }\n})\nconst catogoryMap = {\n  copyright: 'bg-copyright',\n  language: 'bg-language',\n  character: 'bg-character',\n  author: 'bg-author',\n  general: 'bg-general',\n  meta: 'bg-meta',\n  soundtrack: 'bg-soundtrack',\n}\n</script>\n","<template>\n  <div class=\"flex flex-col gap-2\">\n    <!-- Current -->\n    <div>\n      <div class=\"flex justify-between\">\n        <div class=\"ml-1 font-light\">\n          现有标签\n        </div>\n        <div class=\"flex flex-row gap-1 items-center\">\n          <div v-if=\"submitting\" class=\"text-gray-800 dark:text-gray-200\">\n            正在提交<div class=\"inline-block i-uil:spinner-alt animate-spin\" />\n          </div>\n          <button v-else-if=\"isEdited\" class=\"text-blue-500\" @click=\"submit\">\n            提交修改\n          </button>\n          <!-- Undo / Redo -->\n          <button\n            class=\"inline i-uil:redo text-lg -scale-x-full\"\n            :class=\"{ 'text-gray-400 dark:text-gray-600': !editStack.length }\"\n            @click=\"undo\"\n          />\n          <button\n            class=\"inline i-uil:redo text-lg\"\n            :class=\"{ 'text-gray-400 dark:text-gray-600': !redoStack.length }\"\n            @click=\"redo\"\n          />\n        </div>\n      </div>\n      <div class=\"flex gap-1 flex-row flex-wrap\">\n        <RoundTag\n          v-for=\"tag in editTags\"\n          :key=\"tag.id.toHexString()\"\n          :tag=\"tag\"\n          removeable\n          @remove=\"() => onTagRemove(tag.tagid)\"\n        />\n        <RoundTag\n          v-for=\"tagid in pendingTags\"\n          :key=\"tagid\"\n          :tag=\"{\n            category: TagCategoryEnum.General,\n            languages: [\n              {\n                __typename: 'MultilingualMapping',\n                lang: 'ENG',\n                value: `id<${tagid.toString()}>`,\n              },\n            ],\n          }\"\n        />\n      </div>\n    </div>\n    <!-- Adding -->\n    <div>\n      <div class=\"ml-1 font-light\">\n        加入标签\n      </div>\n      <AutoComplete\n        v-model:keyword=\"editTagSearchKeyword\"\n        :teleport-result=\"editTagSearchResult\"\n        @suggestion-click=\"onSuggestionClick\"\n      />\n      <div ref=\"editTagSearchResult\" />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, reactive, ref, shallowRef, watchEffect } from 'vue'\nimport type { AutoCompleteResult } from '@/search/components/AutoComplete.vue'\nimport AutoComplete from '@/search/components/AutoComplete.vue'\nimport RoundTag from '@/tag/components/RoundTag.vue'\nimport type { Query, schema } from '@/graphql'\nimport { TagCategoryEnum, gql, useApolloClient, useMutation } from '@/graphql'\n\nconst props = defineProps<{\n  vid: string\n  tags: schema.Video['tags']\n}>()\nconst emit = defineEmits<{\n  (event: 'refetch'): void\n}>()\n\nconst { resolveClient } = useApolloClient()\n\nconst editTags = ref<schema.Video['tags']>([])\nconst pendingTags = ref<number[]>([])\nwatchEffect(() => {\n  editTags.value = [...props.tags]\n})\nconst isEdited = computed(() => {\n  if (editTags.value.length !== props.tags.length)\n    return true\n  const originalIds = props.tags.map(tag => tag.tagid).sort((a, b) => a - b)\n  const editedIds = editTags.value.map(tag => tag.tagid).sort((a, b) => a - b)\n  return originalIds.some((id, i) => id !== editedIds[i])\n})\nconst addTag = async (tagid: number): Promise<boolean> => {\n  if (editTags.value.find(tag => tag.tagid === tagid) || pendingTags.value.includes(tagid))\n    return false\n  pendingTags.value.push(tagid)\n  const client = resolveClient()\n  const res = await client\n    .query<Query>({\n      query: gql`\n        query ($tid: Int!) {\n          getTagObjects(para: { tagid: [$tid] }) {\n            __typename\n            id\n            tagid\n            category\n            languages {\n              lang\n              value\n            }\n          }\n        }\n      `,\n      variables: {\n        tid: tagid,\n      },\n    })\n    .catch(() => null)\n  pendingTags.value.splice(pendingTags.value.indexOf(tagid), 1)\n  const tag = res?.data?.getTagObjects[0]\n  if (!tag)\n    return false\n  editTags.value.push(tag)\n  return true\n}\nconst removeTag = (tagid: number): boolean => {\n  const index = editTags.value.findIndex(tag => tag.tagid === tagid)\n  if (index === -1)\n    return false\n  editTags.value.splice(index, 1)\n  return true\n}\n\ninterface EditItemAdd {\n  type: 'add'\n  tagid: number\n}\ninterface EditItemRemove {\n  type: 'remove'\n  tagid: number\n}\ntype EditItem = EditItemAdd | EditItemRemove\n\nconst editStack = reactive<EditItem[]>([])\nconst redoStack = reactive<EditItem[]>([])\nconst undo = () => {\n  if (editStack.length > 0) {\n    const item = editStack.pop()!\n    redoStack.push(item)\n    if (item.type === 'add')\n      removeTag(item.tagid)\n    else\n      addTag(item.tagid)\n  }\n}\nconst redo = () => {\n  if (redoStack.length > 0) {\n    const item = redoStack.pop()!\n    editStack.push(item)\n    if (item.type === 'add')\n      addTag(item.tagid)\n    else\n      removeTag(item.tagid)\n  }\n}\nconst pushEdit = (item: EditItem) => {\n  editStack.push(item)\n  redoStack.length = 0\n}\n\nconst editTagSearchKeyword = ref('')\nconst editTagSearchResult = shallowRef<HTMLDivElement>()\n\nconst onTagRemove = (tagid: number) => {\n  if (removeTag(tagid))\n    pushEdit({ type: 'remove', tagid })\n}\nconst onSuggestionClick = async (item: AutoCompleteResult) => {\n  if (typeof item.id !== 'number')\n    return\n  if (await addTag(item.id))\n    pushEdit({ type: 'add', tagid: item.id })\n}\n\nconst { mutate } = useMutation(gql`\n  mutation ($vid: String!, $tags: [Int!]!) {\n    editVideoTagIds(para: { editBehaviour: \"replace\", tags: $tags, videoId: $vid }) {\n      tagid\n    }\n  }\n`)\nconst submitting = ref(false)\nconst submissionError = ref('')\nconst submit = async () => {\n  if (!isEdited.value)\n    return\n  submitting.value = true\n  await mutate({\n    vid: props.vid,\n    tags: editTags.value.map(tag => tag.tagid),\n  }).catch((e) => {\n    submissionError.value = e.message\n  })\n  emit('refetch')\n  submitting.value = false\n}\n</script>\n","<template>\n  <LayoutDefault>\n    <!-- Main Object -->\n    <div v-if=\"video\" class=\"xl:mx-2\">\n      <div class=\"grid grid-cols-12 space-x-2 grid-flow-row-dense\">\n        <!-- Left Column -->\n        <div class=\"col-span-full xl:col-span-9\">\n          <!-- Video Title -->\n          <div>\n            <h1\n              class=\"mt-1 sm:text-lg lg:text-xl font-semibold sm:font-medium lg:font-normal\"\n              v-text=\"video.item.title\"\n            />\n            <div class=\"flex flex-row items-center gap-2 text-gray-600 dark:text-gray-300\">\n              <div v-text=\"t(`video.video.repost-type.${video.item.repostType}`, video.item.repostType)\" />\n              <div v-if=\"clearence !== 3\" v-text=\"t(`video.video.ranks.${clearence}`)\" />\n              <Suspense><RelativeDate :date=\"video.item.uploadTime\" /></Suspense>\n              <template v-if=\"auth.isAdmin\">\n                <div\n                  :title=\"t('video.video.edit.hide-video.title')\"\n                  class=\"i-uil:eye-slash text-lg cursor-pointer select-none\"\n                  @click=\"hideVideo\"\n                />\n                <div v-if=\"hideVideoResult\" v-text=\"hideVideoResult\" />\n              </template>\n              <div\n                v-if=\"auth.isLogin\"\n                :title=\"t('video.video.edit.edit-video')\"\n                class=\"i-uil:pen text-lg cursor-pointer select-none\"\n                @click=\"popEditVideoWindow\"\n              />\n            </div>\n          </div>\n          <!-- Video Player -->\n          <Suspense>\n            <Player :item=\"video.item\" />\n          </Suspense>\n          <!-- <div class=\"ltxl:hidden w-full border-t border-purple-300 my-2\"></div> -->\n          <div class=\"my-1\" />\n          <div ref=\"mobilePlaylistTarget\" />\n          <div ref=\"mobileAuthorTarget\" />\n          <div class=\"mx-1 md:mx-2 lg:mx-4\">\n            <!-- Video Tag -->\n            <div class=\"flex mb-1 gap-1 items-center flex-wrap\">\n              <span :title=\"auth.isLogin ? t('video.video.edit.edit-tags') : undefined\">\n                <div\n                  class=\"i-uil:tag-alt inline-block text-2xl align-middle text-gray-600 dark:text-gray-300\"\n                  :class=\"{ 'cursor-pointer': auth.isLogin }\"\n                  @click=\"() => auth.isLogin && (editTagOpened = true)\"\n                />\n              </span>\n\n              <template v-if=\"!renderTagAsPlainText\">\n                <RoundTag v-for=\"tag in regularTags\" :key=\"tag.id.toHexString()\" :tag=\"tag\" />\n              </template>\n              <div v-else>\n                <span v-for=\"tag in regularTags\" :key=\"tag.id.toHexString()\" class=\"mr-2 text-blue-600\">#{{ behMostMatch(tag.languages) }}</span>\n              </div>\n            </div>\n            <!-- Video Description -->\n            <MarkdownCommentBlock :text=\"video.item.desc\" size=\"sm\" />\n          </div>\n          <div class=\"w-full border-t border-purple-300 dark:border-indigo-800 my-2\" />\n          <!-- Comments -->\n          <div><CommentList :comment-thread-id=\"video.commentThread?.id.toHexString()\" :video-id=\"vid\" /></div>\n        </div>\n\n        <!-- Right Column -->\n        <div class=\"col-span-full xl:col-span-3\">\n          <!-- Edit Tag View -->\n          <div v-if=\"editTagOpened\" class=\"flex flex-col mt-2 gap-1\">\n            <!-- Banner -->\n            <button class=\"flex items-center text-blue-500\" @click=\"() => editTagOpened = false\">\n              <div class=\"i-uil:arrow-left text-xl\" />\n              返回详情\n            </button>\n            <EditTags :key=\"vid\" :vid=\"vid\" :tags=\"video.tags\" @refetch=\"refetch\" />\n          </div>\n          <!-- Recomendation View -->\n          <template v-else>\n            <!-- Author / Uploader -->\n            <Teleport :to=\"mobileAuthorTarget\" :disabled=\"!mobileAuthorTarget || screenSizes.xl\">\n              <div class=\"flex xl:flex-col justify-start px-1 xl:pt-4\">\n                <div\n                  v-for=\"author of authors\"\n                  :key=\"author.id.toHexString()\"\n                  class=\"flex items-center flex-nowrap px-1 py-1 xl:w-full\"\n                >\n                  <!-- Avatar -->\n                  <div class=\"flex-shrink-0\">\n                    <RouterLink v-if=\"author.type === 'User'\" :to=\"`/user/${author.id.toHexString()}`\">\n                      <UserAvatarPopper :uid=\"author.id.toHexString()\">\n                        <UserAvatar\n                          class=\"inline-block w-10 lg:w-14 h-10 lg:h-14 rounded-full bg-gray-500 object-cover\"\n                          :image=\"author.avatar\"\n                          :gravatar=\"author.gravatar\"\n                          :alt=\"author.name\"\n                          hide-title\n                        />\n                      </UserAvatarPopper>\n                    </RouterLink>\n                    <RouterLink v-else-if=\"author.tagid\" :to=\"`/tag/author/${author.tagid}`\">\n                      <UserAvatar\n                        class=\"inline-block w-10 lg:w-14 h-10 lg:h-14 rounded-full bg-gray-500 object-cover\"\n                        :image=\"author.avatar\"\n                        :gravatar=\"author.gravatar\"\n                        :alt=\"author.name\"\n                      />\n                    </RouterLink>\n                    <UserAvatar\n                      v-else\n                      class=\"inline-block w-10 lg:w-14 h-10 lg:h-14 rounded-full bg-gray-500 object-cover\"\n                      :image=\"author.avatar\"\n                      :gravatar=\"author.gravatar\"\n                      :alt=\"author.name\"\n                    />\n                  </div>\n                  <div class=\"hidden sm:block ml-1.5 overflow-hidden\">\n                    <RouterLink v-if=\"author.type === 'User'\" :to=\"`/user/${author.id.toHexString()}`\">\n                      <span\n                        class=\"inline-block align-text-bottom px-0.75 mr-0.5 rounded bg-purple-400 dark:bg-violet-800 text-xs lg:text-sm text-white whitespace-nowrap overflow-hidden\"\n                        v-text=\"author.position\"\n                      />{{ author.name }}\n                    </RouterLink>\n                    <RouterLink v-else-if=\"author.tagid\" :to=\"`/tag/author/${author.tagid}`\">\n                      <span\n                        class=\"inline-block align-text-bottom px-0.75 mr-0.5 rounded bg-purple-400 dark:bg-violet-800 text-xs lg:text-sm text-white whitespace-nowrap overflow-hidden\"\n                        v-text=\"author.position\"\n                      />{{ author.name }}\n                    </RouterLink>\n                    <template v-else>\n                      <span\n                        class=\"inline-block align-text-bottom px-0.75 mr-0.5 rounded bg-purple-400 dark:bg-violet-800 text-xs lg:text-sm text-white whitespace-nowrap overflow-hidden\"\n                        v-text=\"author.position\"\n                      />{{ author.name }}\n                    </template>\n                    <br>\n                    <div\n                      class=\"overflow-hidden whitespace-nowrap overflow-ellipsis text-sm text-gray-600 dark:text-gray-300\"\n                    >\n                      {{ author.desc || t('video.video.no-desc') }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Teleport>\n            <Teleport :to=\"mobilePlaylistTarget\" :disabled=\"!mobilePlaylistTarget || screenSizes.xl\">\n              <div\n                v-if=\"playlist\"\n                class=\"xl:mx-2 border-purple-300 dark:border-purple-800 border-b xl:border xl:rounded-md xl:mt-2 flex flex-col max-h-125\"\n              >\n                <div class=\"mx-2 my-1 flex justify-between\">\n                  <div>\n                    <RouterLink class=\"\" :to=\"`/playlist/${pid}`\">\n                      <div\n                        class=\"i-uil:list-ui-alt inline-block text-lg align-middle text-gray-800 dark:text-gray-100\"\n                      />\n                      {{ playlist.item.title }}\n                    </RouterLink>\n                    <div class=\"text-sm text-gray-900 dark:text-gray-200\">\n                      {{ playlist.meta.createdBy ? `${playlist.meta.createdBy.username} - ` : ''\n                      }}{{ `${playlistIndex} / ${playlist.item.count}` }}\n                    </div>\n                  </div>\n                  <div class=\"flex flex-col justify-around\">\n                    <div\n                      class=\"i-uil:angle-up text-2xl transform transition-transform duration-200 select-none cursor-pointer\"\n                      :class=\"{ 'rotate-180': playlistCollaped }\"\n                      @click=\"playlistCollaped = !playlistCollaped\"\n                    />\n                  </div>\n                </div>\n                <div v-show=\"!playlistCollaped\" class=\"h-full overflow-y-auto\">\n                  <RouterLink\n                    v-for=\"(plVideo, plIndex) in playlistVideos\"\n                    :key=\"plVideo.video.id.toHexString()\"\n                    class=\"flex justify-start space-x-1 py-1 hover:bg-purple-50 dark:hover:bg-gray-800\"\n                    :class=\"{ 'bg-purple-50 dark:bg-gray-800': plVideo.video.id.toHexString() === vid }\"\n                    :to=\"`/video/${plVideo.video.id}?list=${pid}`\"\n                  >\n                    <div\n                      class=\"flex flex-col flex-shrink-0 flex-grow-0 justify-around text-xs w-6 self-center text-center overflow-hidden\"\n                    >\n                      <template v-if=\"plIndex + 1 === playlistIndex\">\n                        <div class=\"i-uil:play mx-auto\" />\n                      </template><template v-else>\n                        {{ plVideo.rank + 1 }}\n                      </template>\n                    </div>\n                    <div class=\"flex-shrink-0 flex-grow-0 w-24\">\n                      <div class=\"aspect-ratio-8/5\">\n                        <img\n                          class=\"inline-block\"\n                          width=\"96\"\n                          height=\"54\"\n                          :src=\"getCoverImage({ image: plVideo.video.item.coverImage })\"\n                        >\n                      </div>\n                    </div>\n                    <div class=\"flex flex-col justify-between\">\n                      <h2 class=\"text-sm line-clamp-2\" v-text=\"plVideo.video.item.title\" />\n                      <div\n                        v-if=\"plVideo.video.meta.createdBy\"\n                        class=\"text-xs text-gray-900 dark:text-gray-200\"\n                        v-text=\"plVideo.video.meta.createdBy.username\"\n                      />\n                    </div>\n                  </RouterLink>\n                </div>\n              </div>\n            </Teleport>\n            <!-- Related Video -->\n            <div class=\"mt-2\">\n              <span class=\"ml-1 font-light\">{{ t('video.video.related-video') }}</span>\n              <div class=\"flex flex-col\">\n                <RouterLink\n                  v-for=\"rlVideo in video.relatedVideos\"\n                  :key=\"rlVideo.id.toHexString()\"\n                  :to=\"`/video/${rlVideo.id.toHexString()}`\"\n                  class=\"grid grid-cols-5 space-x-1.5 py-0.5 rounded-md hover:bg-purple-50 dark:hover:bg-gray-800 transition-colors duration-100\"\n                >\n                  <div class=\"col-span-2\">\n                    <Cover\n                      :title=\"rlVideo.item.title\"\n                      :cover-image=\"rlVideo.item.coverImage\"\n                      class=\"rounded-md\"\n                    />\n                  </div>\n                  <div class=\"col-span-3 flex mt-0.5 flex-wrap content-start text-sm\">\n                    <a class=\"line-clamp-2 overflow-ellipsis overflow-hidden w-full\" v-text=\"rlVideo.item.title\" />\n                    <div\n                      class=\"text-sm inline-block w-full mt-1 truncate font-light\"\n                      v-text=\"rlVideo.meta.createdBy?.username\"\n                    />\n                  </div>\n                </RouterLink>\n              </div>\n            </div>\n          </template>\n        </div>\n      </div>\n    </div>\n    <!-- Placeholder -->\n    <div v-else class=\"mx-2\">\n      <div class=\"grid grid-cols-12 grid-flow-row-dense\">\n        <div class=\"col-span-full xl:col-span-9\">\n          <!-- Video Title -->\n          <div>\n            <h1 class=\"mt-1 sm:text-lg lg:text-xl w-4/5 rounded-md bg-gray-300 dark:bg-gray-600\">\n              &nbsp;\n            </h1>\n            <div class=\"mt-1 text-gray-600 dark:text-gray-300 w-2/5 rounded-md bg-gray-300 dark:bg-gray-600\">\n              &nbsp;\n            </div>\n          </div>\n          <!-- Video Player -->\n          <div class=\"w-full mt-1\">\n            <div class=\"aspect-ratio-16/9\">\n              <div class=\"w-full h-full bg-gray-400 dark:bg-gray-600\" />\n            </div>\n          </div>\n        </div>\n        <div class=\"col-span-full xl:col-span-3 space-x-2\">\n          <!-- Author / Uploader -->\n          <div class=\"flex xl:flex-col justify-start px-1 xl:pt-4\">\n            <div class=\"flex items-center flex-nowrap px-1 py-1 xl:w-full\">\n              <!-- Avatar -->\n              <div class=\"relative flex-shrink-0\">\n                <div class=\"inline-block w-10 lg:w-14 h-10 lg:h-14 rounded-full bg-gray-400 dark:bg-gray-600\">\n                  &nbsp;\n                </div>\n              </div>\n              <div class=\"hidden sm:block w-full ml-3 overflow-hidden\">\n                <div class=\"inline-block w-4/5 rounded-md bg-gray-300 dark:bg-gray-600\">\n                  &nbsp;\n                </div>\n                <br>\n                <div\n                  class=\"inline-block overflow-hidden whitespace-nowrap overflow-ellipsis text-sm w-2/5 mt-1 rounded-md bg-gray-400 dark:bg-gray-600\"\n                >\n                  &nbsp;\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- Related Video -->\n          <div class=\"flex flex-col space-y-1 mt-2\">\n            <div v-for=\"i in 20\" :key=\"i\" class=\"grid grid-cols-5 space-x-1 hover:bg-purple-50 dark:hover:bg-gray-800\">\n              <div class=\"col-span-2\">\n                <CoverPlaceholder class=\"rounded-sm\" />\n              </div>\n              <div class=\"col-span-3 flex flex-wrap content-start text-sm\">\n                <a class=\"line-clamp-2 overflow-ellipsis overflow-hidden w-4/5 rounded-md bg-gray-400 dark:bg-gray-600\">&nbsp;</a>\n                <div class=\"text-sm mt-1 inline-block w-2/5 truncate rounded-md bg-gray-300 dark:bg-gray-600\">\n                  &nbsp;\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </LayoutDefault>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref, shallowRef, watchEffect } from 'vue'\nimport { useRoute } from 'vue-router'\nimport { useI18n } from 'vue-i18n'\nimport { useLocalStorage } from '@vueuse/core'\nimport Player from './components/Player.vue'\nimport Cover from './components/Cover.vue'\nimport CoverPlaceholder from './components/CoverPlaceholder.vue'\nimport CommentList from './components/CommentList.vue'\nimport EditTags from './components/EditTags.vue'\nimport RoundTag from '@/tag/components/RoundTag.vue'\nimport MarkdownCommentBlock from '@/markdown/components/MarkdownCommentBlock.vue'\nimport RelativeDate from '@/date-fns/components/RelativeDate.vue'\nimport UserAvatar from '@/user/components/UserAvatar.vue'\nimport UserAvatarPopper from '@/user/components/UserAvatarPopper.vue'\nimport { gql, useQuery, useResult } from '@/graphql'\nimport type { ObjectID, Query, schema } from '@/graphql'\nimport { setSiteTitle } from '@/common/libs/setSiteTitle'\nimport { screenSizes } from '@/css'\nimport { getCoverImage } from '@/common/libs/imageUrl'\nimport { behMostMatch } from '@/locales'\nimport { openWindow } from '@/nested'\nimport { useAuth } from '@/user'\nimport { startProgress, stopProgress } from '@/nprogress'\n\nconst { t } = useI18n()\nconst route = useRoute()\nconst auth = useAuth()\n\n/* submit query */\nconst vid = computed(() => route.params.vid as string)\nconst pid = computed(() => Array.isArray(route.query.list) ? route.query.list[0] : route.query.list)\nconst { result, loading, refetch } = useQuery<Query>(\n  gql`\n    query ($vid: String!, $fetchPlaylist: Boolean!, $pid: String = \"\") {\n      getVideo(para: { vid: $vid, lang: \"CHS\" }) {\n        item {\n          title\n          desc\n          uploadTime\n          url\n          repostType\n          site\n        }\n        meta {\n          createdBy {\n            id\n            username\n            desc\n            image\n            gravatar\n          }\n        }\n        tags {\n          __typename\n          id\n          tagid\n          category\n          languages {\n            lang\n            value\n          }\n          ... on AuthorTagObject {\n            authorRole\n            author {\n              id\n              tagname\n              avatar\n              desc\n            }\n          }\n        }\n        commentThread {\n          id\n        }\n        relatedVideos(topK: 20) {\n          id\n          item {\n            title\n            coverImage\n          }\n          meta {\n            createdBy {\n              username\n            }\n          }\n        }\n        clearence\n      }\n      listAdjacentVideos(para: { pid: $pid, vid: $vid, k: 200 }) @include(if: $fetchPlaylist) {\n        video {\n          id\n          item {\n            title\n            coverImage\n          }\n          meta {\n            createdBy {\n              username\n            }\n          }\n        }\n        rank\n      }\n      getPlaylist(para: { pid: $pid }) @include(if: $fetchPlaylist) {\n        item {\n          title\n          count\n        }\n        meta {\n          createdBy {\n            username\n          }\n        }\n      }\n    }\n  `,\n  {\n    vid: vid.value,\n    fetchPlaylist: !!pid.value,\n    pid: pid.value,\n  },\n)\n\n// sync process bar\nwatchEffect(() => {\n  if (loading.value)\n    startProgress()\n  else\n    stopProgress()\n})\n\n/* basic info */\nconst video = useResult(result, null, data => data?.getVideo)\n// change title\nwatchEffect(() => {\n  if (video.value)\n    setSiteTitle(`${video.value.item.title} - PatchyVideo`)\n})\n\n/* tags */\ninterface Author {\n  type: 'AuthorTag' | 'User'\n  position: string\n  id: ObjectID\n  tagid?: number\n  name: string\n  desc: string\n  avatar: string\n  gravatar?: string\n}\nconst authors = computed(() =>\n  video.value\n    ? ((video.value.tags.filter(v => v.__typename === 'AuthorTagObject') as schema.AuthorTagObject[])\n        .map(\n          tag =>\n            tag.author\n            && ({\n              type: 'AuthorTag',\n              id: tag.author.id,\n              tagid: tag.tagid,\n              name: tag.author.tagname,\n              desc: tag.author.desc,\n              avatar: tag.author.avatar,\n              position: tag.authorRole,\n            } as Author),\n        )\n        .concat([\n          video.value.meta.createdBy && {\n            type: 'User',\n            id: video.value.meta.createdBy.id,\n            name: video.value.meta.createdBy.username,\n            desc: video.value.meta.createdBy.desc,\n            avatar: video.value.meta.createdBy.image,\n            gravatar: video.value.meta.createdBy.gravatar || undefined,\n            position: t('video.video.uploader'),\n          },\n        ])\n        .filter(v => !!v) as Author[])\n    : [],\n)\nconst regularTags = computed(() =>\n  video.value ? (video.value.tags.filter(v => v.__typename === 'RegularTagObject') as schema.RegularTagObject[]) : [],\n)\n\n/* mobile teleport targets */\nconst mobileAuthorTarget = shallowRef<HTMLDivElement | null>(null)\nconst mobilePlaylistTarget = shallowRef<HTMLDivElement | null>(null)\n\n/* video playlist, ?list=[PID] */\n// raw playlist\nconst playlist = useResult(result, null, data => data?.getPlaylist)\n// videos in playlist\nconst playlistVideos = useResult(result, null, data => data?.listAdjacentVideos)\n// the index that current video at\nconst playlistIndex = computed(() =>\n  video.value && playlistVideos.value\n    ? (playlistVideos.value.find(v => v.video.id.toHexString() === vid.value)?.rank ?? -2) + 1\n    : -1,\n)\n// whither playlist is collaped\nconst playlistCollaped = ref(!screenSizes.xl)\n\n// use plain text to render tags, just made it for fun.\nconst renderTagAsPlainText = useLocalStorage('video_tag_render_as_plain_text', false)\n\n/* edit video */\nconst editVideoWindow = shallowRef<Window | null>(null)\nconst popEditVideoWindow = () => {\n  // check if there is already a window opened\n  if (editVideoWindow.value && !editVideoWindow.value.closed)\n    editVideoWindow.value.focus()\n\n  // create a new window\n  const { window: win } = openWindow({\n    url: `/edit-video/${vid.value}`,\n  })\n  editVideoWindow.value = win\n}\n\n// video clearence\nconst clearence = computed(() => video.value?.clearence ?? 3)\n\n/* hide video */\nconst hideVideoResult = ref('')\nconst hideVideo = () => {\n  hideVideoResult.value = t('video.video.edit.hide-video.saving')\n  fetch('https://patchyvideo.com/be/videos/condemn_video.do', {\n    method: 'POST',\n    headers: new Headers({\n      'Content-Type': 'application/json',\n    }),\n    body: JSON.stringify({\n      vid: vid.value,\n    }),\n    credentials: 'include',\n  })\n    .then(data => data.json())\n    .then((res) => {\n      // console.log(res)\n      if (res.status === 'SUCCEED')\n        hideVideoResult.value = t('video.video.edit.hide-video.succeed')\n      else\n        throw new Error(res)\n    })\n    .catch((e) => {\n      console.error(e)\n      hideVideoResult.value = t('video.video.edit.hide-video.failed', { error: e.message ?? e })\n    })\n}\n\n/* edit tags */\nconst editTagOpened = ref(false)\n</script>\n"],"names":["CommentType","TagCategoryEnum","markdownIt","MarkdownIt","facePlugin","render","src","res","e","html","ref","waitingForRender","watch","props","p","op","root","shallowRef","useIntersectionObserver","isIntersecting","nextTick","emit","auth","useAuth","commentParentType","computed","commentParentId","_b","_a","mutatePostComment","useMutation","gql","inputEl","inputContent","onInput","onReset","postingComment","postingCommentError","onSubmit","enablePreview","togglePreview","threadDisabled","threadIdOverride","tid","result","loadingThread","refetchThread","start","stop","useQuery","n","commentThread","useResult","data","comments","_c","v","comment","a","b","commentChildrenExpaneded","reactive","sliceCommentChildren","id","children","isCommentChildrenCollapsed","commentHiddenOverrides","onRefetchThread","newThreadId","tagComp","behMostMatch","catogoryMap","resolveClient","useApolloClient","editTags","pendingTags","watchEffect","isEdited","originalIds","tag","editedIds","i","addTag","tagid","tag2","removeTag","index","editStack","redoStack","undo","item","redo","pushEdit","editTagSearchKeyword","editTagSearchResult","onTagRemove","onSuggestionClick","mutate","submitting","submissionError","submit","t","useI18n","route","useRoute","vid","pid","loading","refetch","startProgress","stopProgress","video","setSiteTitle","authors","regularTags","mobileAuthorTarget","mobilePlaylistTarget","playlist","playlistVideos","playlistIndex","playlistCollaped","screenSizes","renderTagAsPlainText","useLocalStorage","editVideoWindow","popEditVideoWindow","win","openWindow","clearence","hideVideoResult","hideVideo","editTagOpened"],"mappings":"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"}