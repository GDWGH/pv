{"version":3,"file":"Notification.1ffce2e7.js","sources":["../../packages/common/libs/link.ts","../../packages/user-notification/components/NoteBoxReplyComment.vue","../../packages/user-notification/libs/listNoteCountTypes.ts","../../packages/user-notification/components/NoteBoxSystemMessage.vue","../../packages/user-notification/Notification.vue"],"sourcesContent":["export function openInNewTab(url: string) {\n  window.open(url, '_blank')\n}\n","<template>\n  <div class=\"border-b flex justify-between p-1\">\n    <div>{{ t('user-notification.notification-reply.title') }}</div>\n    <div\n      class=\"text-sm cursor-pointer transition transition-colors hover:text-purple-300\"\n      :class=\"{ 'text-gray-500': !listNoteCountUnread }\"\n      @click=\"markAsRead(true, (noteType = 'comment_reply'), [])\"\n    >\n      {{ t('user-notification.notification-reply.mark-all-as-read') }}\n    </div>\n  </div>\n  <div v-if=\"listNoteStatus === 'loading'\">\n    {{ t('user-notification.notification-reply.loading') }}\n  </div>\n  <div v-else-if=\"listNoteStatus === 'error'\" />\n  <div v-else-if=\"listNoteCountAll === 0\">\n    {{ t('user-notification.notification-reply.no-message') }}\n  </div>\n  <div v-else>\n    <div v-for=\"note in listNote\" :key=\"note.id.toHexString()\">\n      <div\n        v-if=\"note.__typename === 'ReplyNotificationObject'\"\n        class=\"flex items-center m-1 p-2 shadow rounded-md\"\n        :class=\"{ 'bg-gray-100 dark:bg-gray-500': !note.read }\"\n      >\n        <router-link class=\"w-1/6 md:w-1/15 mr-2 cursor-pointer\" :to=\"`/user/${note.repliedBy.id.toHexString()}`\">\n          <UserAvatar\n            :title=\"note.repliedBy.username\"\n            :image=\"note.repliedBy.image\"\n            :gravatar=\"note.repliedBy.gravatar\"\n            class=\"rounded-full ring-2 ring-white\"\n          />\n        </router-link>\n        <router-link\n          v-slot=\"{ href, navigate }\"\n          :to=\"\n            `${(note.repliedType === 'forum' ? '' : note.repliedType === 'video' ? '/video/' : '/playlist/')\n              + note.repliedObj\n            }#${\n              note.cid}`\n          \"\n          custom\n        >\n          <div\n            class=\"w-5/6 md:w-14/15\"\n            @click=\"\n              () => {\n                markAsRead(false, note.__typename, [note.id.toHexString()], note.read)\n                navigate()\n              }\n            \"\n            @click.middle=\"\n              () => {\n                markAsRead(false, note.__typename, [note.id.toHexString()], note.read)\n                openInNewTab(href)\n              }\n            \"\n          >\n            <div>\n              {{ t('user-notification.notification-reply.reply', { username: note.repliedBy.username }) }}\n            </div>\n            <div class=\"text-xs bg-gray-100 text-gray-400 p-1 truncate dark:bg-gray-500 dark:text-gray-200\">\n              {{ note.content }}\n            </div>\n            <div class=\"text-xs text-gray-600 dark:text-white\">\n              <RelativeDate :date=\"note.time\" />\n            </div>\n          </div>\n        </router-link>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref, watch, watchEffect } from 'vue'\nimport { useVModels } from '@vueuse/core'\nimport { useI18n } from 'vue-i18n'\nimport RelativeDate from '@/date-fns/components/RelativeDate.vue'\nimport UserAvatar from '@/user/components/UserAvatar.vue'\nimport { markAsReadMutationCount } from '@/user-notification/libs/markAsRead'\nimport { gql, useMutation, useQuery, useResult } from '@/graphql'\nimport type { Mutation, Query, schema } from '@/graphql'\nimport { openInNewTab } from '@/common/libs/link'\nimport { startProgress, stopProgress } from '@/nprogress'\n\nconst props = defineProps<{\n  limit: number\n  offset: number\n  pageCount: schema.Maybe<number> | undefined\n}>()\n\nconst emit = defineEmits<{\n  (event: 'update:limit', value: number): void\n  (event: 'update:offset', value: number): void\n  (event: 'update:pageCount', value: number): void\n}>()\n\nconst { t } = useI18n()\n\nconst noteType = ref('comment_reply')\nconst listAll = ref(true)\nconst { limit, offset, pageCount } = useVModels(props, emit)\nconst listNoteStatus = ref<'loading' | 'result' | 'error'>()\nconst listNote = ref<\n(schema.ReplyNotificationObject | schema.BaseNotificationObject | schema.SystemNotificationObject)[]\n  >([])\nconst listNoteCountAll = ref(0)\nconst listNoteCountUnread = ref(0)\n\nconst { result, loading, onError, fetchMore } = useQuery<Query>(\n  gql`\n    query ($offset: Int, $limit: Int, $listAll: Boolean, $noteType: String) {\n      listNotifications(para: { offset: $offset, limit: $limit, listAll: $listAll, noteType: $noteType }) {\n        notes {\n          id\n          read\n          ... on ReplyNotificationObject {\n            cid\n            repliedBy {\n              id\n              username\n              image\n              gravatar\n            }\n            time\n            repliedObj\n            repliedType\n            content\n          }\n        }\n        countAll\n        countUnread\n        pageCount\n      }\n    }\n  `,\n  {\n    offset: offset.value * limit.value,\n    limit: limit.value,\n    listAll: listAll.value,\n    noteType: noteType.value,\n  },\n  {\n    notifyOnNetworkStatusChange: true,\n  },\n)\nwatchEffect(() => {\n  if (loading.value) {\n    listNoteStatus.value = 'loading'\n    startProgress()\n  }\n  else {\n    listNoteStatus.value = 'result'\n    stopProgress()\n  }\n})\n\nconst listNotifications = useResult(result, null, data => data?.listNotifications)\nwatchEffect(() => {\n  if (listNotifications.value) {\n    listNote.value = listNotifications.value.notes\n    listNoteCountAll.value = listNotifications.value.countAll\n    listNoteCountUnread.value = listNotifications.value.countUnread\n    pageCount.value = listNotifications.value.pageCount\n  }\n  else { listNoteStatus.value = 'error' }\n})\n\nconst errMsg = ref('')\nonError((err) => {\n  errMsg.value = err.message\n  listNoteStatus.value = 'error'\n})\n\n// Refresh query result for URL query change\nwatch(\n  props,\n  () => {\n    fetchMore({\n      variables: {\n        offset: offset.value * limit.value,\n        limit: limit.value,\n        listAll: listAll.value,\n        noteType: noteType.value,\n      },\n      updateQuery(previousQueryResult, { fetchMoreResult }) {\n        if (!fetchMoreResult)\n          return previousQueryResult\n        return fetchMoreResult\n      },\n    })\n  },\n  { deep: true },\n)\n\n/* Mutation for notifications read */\nconst {\n  mutate,\n  loading: markAsReadLoading,\n  onDone,\n  onError: markAsReadError,\n} = useMutation<Mutation>(\n  gql`\n    mutation ($markAll: Boolean, $noteType: String, $noteIds: [String!]) {\n      markAsRead(para: { markAll: $markAll, noteType: $noteType, noteIds: $noteIds }) {\n        empty\n      }\n    }\n  `,\n)\nwatchEffect(() => {\n  if (markAsReadLoading.value)\n    markAsReadMutationCount.value++\n})\nlet isMarkAll = false\nonDone(() => {\n  markAsReadMutationCount.value--\n  if (isMarkAll)\n    location.reload()\n})\nmarkAsReadError(() => {\n  markAsReadMutationCount.value--\n})\nfunction markAsRead(markAll = false, noteType = 'comment_reply', noteId: string[], noteIsRead = false): void {\n  if (!listNoteCountUnread.value || noteIsRead)\n    return\n  isMarkAll = markAll\n  mutate({ markAll, noteType, noteIds: noteId })\n}\n</script>\n","import { computed, ref } from 'vue'\n\ninterface ListNoteCountTypes {\n  systemMessage: number\n  commentReply: number\n}\nexport const listNoteCountTypes = ref<ListNoteCountTypes>({\n  commentReply: 0,\n  systemMessage: 0,\n})\nexport const listNoteCountTypesSystemMessage = computed(() => listNoteCountTypes.value.systemMessage)\nexport const listNoteCountTypesCommentReply = computed(() => listNoteCountTypes.value.commentReply)\n","<template>\n  <div class=\"border-b flex justify-between p-1\">\n    <div>{{ t('user-notification.notification-system.title') }}</div>\n    <div\n      class=\"text-sm cursor-pointer transition transition-colors hover:text-purple-300\"\n      :class=\"{ 'text-gray-500': !listNoteCountUnread }\"\n      @click=\"markAsRead(true, (noteType = 'system_message'), [])\"\n    >\n      {{ t('user-notification.notification-system.mark-all-as-read') }}\n    </div>\n  </div>\n  <div v-if=\"listNoteStatus === 'loading'\">\n    {{ t('user-notification.notification-system.loading') }}\n  </div>\n  <div v-else-if=\"listNoteStatus === 'error'\" />\n  <div v-else-if=\"listNoteCountAll === 0\">\n    {{ t('user-notification.notification-system.no-message') }}\n  </div>\n  <div v-else class=\"space-y-2\">\n    <div v-for=\"(note, index) in listNote\" :key=\"note.id.toHexString()\">\n      <div\n        v-if=\"note.__typename === 'SystemNotificationObject'\"\n        class=\"m-1 p-2 shadow rounded-md space-y-2\"\n        :class=\"{ 'bg-gray-100 dark:bg-gray-500': !listNoteRead[index] }\"\n      >\n        <div>{{ note.title }}</div>\n        <div class=\"relative overflow-hidden\">\n          <div\n            class=\"transform transition-all duration-200 text-sm\"\n            :style=\"{ marginTop: note.id.toHexString() === listNoteOpenID ? '0' : '-100%' }\"\n          >\n            {{ note.content }}\n          </div>\n        </div>\n        <div class=\"flex justify-between text-xs text-gray-600 dark:text-white\">\n          <RelativeDate :date=\"note.time\" />\n          <div\n            class=\"cursor-pointer text-purple-300\"\n            @click=\"markAsRead(false, note.type, [note.id.toHexString()], listNoteRead[index])\"\n          >\n            {{\n              note.id.toHexString() === listNoteOpenID\n                ? t('user-notification.notification-system.fold')\n                : t('user-notification.notification-system.unfold')\n            }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref, watch, watchEffect } from 'vue'\nimport { useVModels } from '@vueuse/core'\nimport { useI18n } from 'vue-i18n'\nimport RelativeDate from '@/date-fns/components/RelativeDate.vue'\nimport { markAsReadMutationCount } from '@/user-notification/libs/markAsRead'\nimport { listNoteCountTypes } from '@/user-notification/libs/listNoteCountTypes'\nimport { gql, useMutation, useQuery, useResult } from '@/graphql'\nimport type { Mutation, Query, schema } from '@/graphql'\nimport { startProgress, stopProgress } from '@/nprogress'\n\nconst props = defineProps<{\n  limit: number\n  offset: number\n  pageCount: schema.Maybe<number> | undefined\n}>()\n\nconst emit = defineEmits<{\n  (event: 'update:limit', value: number): void\n  (event: 'update:offset', value: number): void\n  (event: 'update:pageCount', value: number): void\n}>()\n\nconst { t } = useI18n()\n\nconst noteType = ref('system_message')\nconst listAll = ref(true)\nconst { limit, offset, pageCount } = useVModels(props, emit)\nconst listNoteStatus = ref<'loading' | 'result' | 'error'>()\nconst listNote = ref<\n(schema.ReplyNotificationObject | schema.BaseNotificationObject | schema.SystemNotificationObject)[]\n  >([])\n// Unknown bug: listNote.value canoot be changed, so use listNoteRead to present wether the note is read or not\nconst listNoteRead = ref<boolean[]>([])\nconst listNoteOpenID = ref<string>()\nconst listNoteCountAll = ref(0)\nconst listNoteCountUnread = ref(0)\n\nconst { result, loading, onError, fetchMore } = useQuery<Query>(\n  gql`\n    query ($offset: Int, $limit: Int, $listAll: Boolean, $noteType: String) {\n      listNotifications(para: { offset: $offset, limit: $limit, listAll: $listAll, noteType: $noteType }) {\n        notes {\n          id\n          read\n          type\n          ... on SystemNotificationObject {\n            time\n            title\n            content\n          }\n        }\n        countAll\n        countUnread\n        pageCount\n      }\n    }\n  `,\n  {\n    offset: offset.value * limit.value,\n    limit: limit.value,\n    listAll: listAll.value,\n    noteType: noteType.value,\n  },\n  {\n    notifyOnNetworkStatusChange: true,\n  },\n)\nwatchEffect(() => {\n  if (loading.value) {\n    listNoteStatus.value = 'loading'\n    startProgress()\n  }\n  else {\n    listNoteStatus.value = 'result'\n    stopProgress()\n  }\n})\n\nconst listNotifications = useResult(result, null, data => data?.listNotifications)\nwatchEffect(() => {\n  if (listNotifications.value) {\n    listNoteRead.value = listNotifications.value.notes.map(item => item.read)\n    listNote.value = listNotifications.value.notes\n    listNoteCountAll.value = listNotifications.value.countAll\n    listNoteCountUnread.value = listNotifications.value.countUnread\n    pageCount.value = listNotifications.value.pageCount\n  }\n  else { listNoteStatus.value = 'error' }\n})\n\nconst errMsg = ref('')\nonError((err) => {\n  errMsg.value = err.message\n  listNoteStatus.value = 'error'\n})\n\n// Refresh query result for URL query change\nwatch(\n  props,\n  () => {\n    fetchMore({\n      variables: {\n        offset: offset.value * limit.value,\n        limit: limit.value,\n        listAll: listAll.value,\n        noteType: noteType.value,\n      },\n      updateQuery(previousQueryResult, { fetchMoreResult }) {\n        if (!fetchMoreResult)\n          return previousQueryResult\n        return fetchMoreResult\n      },\n    })\n  },\n  { deep: true },\n)\n\nconst {\n  mutate,\n  loading: markAsReadLoading,\n  onDone,\n  onError: markAsReadError,\n} = useMutation<Mutation>(\n  gql`\n    mutation ($markAll: Boolean, $noteType: String, $noteIds: [String!]) {\n      markAsRead(para: { markAll: $markAll, noteType: $noteType, noteIds: $noteIds }) {\n        empty\n      }\n    }\n  `,\n)\nwatchEffect(() => {\n  if (markAsReadLoading.value)\n    markAsReadMutationCount.value++\n})\nlet isMarkAll = false\nonDone(() => {\n  markAsReadMutationCount.value--\n  if (isMarkAll)\n    location.reload()\n  listNoteCountTypes.value.systemMessage--\n})\nmarkAsReadError(() => {\n  // console.log(error)\n  markAsReadMutationCount.value--\n})\nfunction markAsRead(markAll = false, noteType2 = noteType.value, noteId: string[], noteIsRead = false): void {\n  listNoteOpenID.value === noteId[0] ? (listNoteOpenID.value = undefined) : (listNoteOpenID.value = noteId[0])\n  if (!listNoteCountUnread.value || noteIsRead)\n    return\n  if (noteId[0])\n    listNoteRead.value[listNote.value.findIndex(note => note.id.toHexString() === noteId[0])] = true\n  isMarkAll = markAll\n  mutate({ markAll, noteType: noteType2, noteIds: noteId })\n}\n</script>\n","<template>\n  <LayoutDefault :fetch-note=\"false\">\n    <!-- Mobile View -->\n    <div v-if=\"screenSizes['<md']\" class=\"w-full p-2 dark:bg-gray-900 dark:border-black\">\n      <div v-if=\"noteType === 'comment_reply'\">\n        <NoteBoxReplyComment v-model:limit=\"limit\" v-model:offset=\"offset\" v-model:pageCount=\"pageCount\" />\n      </div>\n      <div v-else-if=\"noteType === 'system_message'\">\n        <NoteBoxSystemMessage v-model:limit=\"limit\" v-model:offset=\"offset\" v-model:pageCount=\"pageCount\" />\n      </div>\n      <PvPagination\n        :page-count=\"Number(pageCount)\" :page=\"page\" @previous=\"jumpToPreviousPage\" @next=\"jumpToNextPage\"\n        @change=\"jumpToSelectedPage\"\n      />\n      <!-- DrawerLayout -->\n      <div\n        class=\"shadow fixed bottom-20 right-5 bg-gray-50 select-none p-2 rounded-full dark:bg-gray-800\"\n        :title=\"t('user-notification.notification.slide-open')\" @click=\"noteDrawerOpen = true\"\n      >\n        <div class=\"i-uil:chat text-2xl\" />\n        <label\n          v-if=\"listNoteCountUnread\"\n          class=\"absolute top-0 right-0 bg-red-500 text-white text-xs rounded-full px-1\"\n        >{{ listNoteCountUnread > 99\n          ? '99+' : listNoteCountUnread\n        }}</label>\n      </div>\n      <div\n        class=\"fixed inset-x-0 border-t rounded-t border-purple-400 p-1 z-50 bottom-0 overflow-auto bg-white transform transition-transform duration-300 dark:bg-gray-900\"\n        :class=\"{ 'translate-y-full': !noteDrawerOpen }\"\n      >\n        <div class=\"w-full border-b p-1 pb-1.5 flex justify-between\">\n          <div class=\"flex items-center flex-nowrap\">\n            <div class=\"i-uil:telegram-alt text-2xl transition-colors\" />\n            <div class=\"text-lg ml-2\">\n              {{ t('user-notification.notification.title') }}\n            </div>\n          </div>\n          <div class=\"i-uil:times text-2xl transition-colors\" @click=\"noteDrawerOpen = false\" />\n        </div>\n        <div class=\"mt-4 space-y-2\">\n          <div\n            class=\"flex align-middle p-2 rounded-md cursor-pointer\"\n            :class=\"{ 'bg-gray-50 shadow-inner dark:bg-gray-500': noteType === 'comment_reply' }\"\n            @click=\"changeNoteType('comment_reply')\"\n          >\n            <div class=\"i-uil:comment-alt-dots inline align-middle text-xl text-center\" />\n            <div>\n              {{ t('user-notification.notification.reply') }}\n              <label v-if=\"listNoteCountTypesCommentReply\" class=\"bg-red-500 text-white text-sm rounded-full px-2\">{{\n                (listNoteCountTypesCommentReply ? listNoteCountTypesCommentReply : 0)\n                  > 99 ? '99+' : listNoteCountTypesCommentReply\n              }}</label>\n            </div>\n          </div>\n          <div\n            class=\"flex align-middle p-2 rounded-md text-gray-500 cursor-pointer\"\n            :class=\"{ 'bg-gray-50 shadow-inner dark:bg-gray-500': noteType === 'at' }\"\n          >\n            <div class=\"i-uil:at inline align-middle text-xl text-center\" />\n            <div>{{ t('user-notification.notification.at') }}</div>\n          </div>\n          <div\n            class=\"flex align-middle p-2 rounded-md cursor-pointer\"\n            :class=\"{ 'bg-gray-50 shadow-inner dark:bg-gray-500': noteType === 'system_message' }\"\n            @click=\"changeNoteType('system_message')\"\n          >\n            <div class=\"i-uil:volume inline align-middle text-xl text-center\" />\n            <div>\n              {{ t('user-notification.notification.system') }}\n              <label v-if=\"listNoteCountTypesSystemMessage\" class=\"bg-red-500 text-white text-sm rounded-full px-2\">{{\n                (listNoteCountTypesSystemMessage ? listNoteCountTypesSystemMessage : 0)\n                  > 99 ? '99+' : listNoteCountTypesSystemMessage\n              }}</label>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- Mask -->\n      <Transition\n        enter-active-class=\"transition-all duration-200\" enter-from-class=\"bg-opacity-0\"\n        leave-active-class=\"transition-all duration-200\" leave-to-class=\"bg-opacity-0\"\n      >\n        <div v-if=\"noteDrawerOpen\" class=\"fixed inset-0 z-49\" @click=\"noteDrawerOpen = false\" />\n      </Transition>\n    </div>\n    <!-- Desktop View -->\n    <div v-else class=\"p-5 flex space-x-3 min-h-screen w-9/10 m-auto xl:w-4/5\">\n      <!-- Nav Left -->\n      <div class=\"p-1 overflow-auto rounded-md shadow bg-white w-1/4 xl:w-1/5 dark:bg-gray-900\">\n        <div class=\"w-full border-b p-1 pb-1.5 flex items-center flex-nowrap\">\n          <div class=\"i-uil:telegram-alt text-2xl transition-colors hover:bg-gray-200 dark:hover:bg-gray-700\" />\n          <div class=\"text-lg ml-2\">\n            {{ t('user-notification.notification.title') }}\n          </div>\n        </div>\n        <div class=\"mt-4 space-y-2\">\n          <div\n            class=\"flex align-middle p-2 rounded-md cursor-pointer\"\n            :class=\"{ 'bg-gray-50 shadow-inner dark:bg-gray-500': noteType === 'comment_reply' }\"\n            @click=\"changeNoteType('comment_reply')\"\n          >\n            <div class=\"i-uil:comment-alt-dots inline align-middle text-xl text-center\" />\n            <div>\n              {{ t('user-notification.notification.reply') }}\n              <label v-if=\"listNoteCountTypesCommentReply\" class=\"bg-red-500 text-white text-sm rounded-full px-2\">{{\n                (listNoteCountTypesCommentReply ? listNoteCountTypesCommentReply : 0)\n                  > 99 ? '99+' : listNoteCountTypesCommentReply\n              }}</label>\n            </div>\n          </div>\n          <div\n            class=\"flex align-middle p-2 rounded-md text-gray-500 cursor-pointer\"\n            :class=\"{ 'bg-gray-50 shadow-inner dark:bg-gray-500': noteType === 'at' }\"\n          >\n            <div class=\"i-uil:at inline align-middle text-xl text-center\" />\n            <div>{{ t('user-notification.notification.at') }}</div>\n          </div>\n          <div\n            class=\"flex align-middle p-2 rounded-md cursor-pointer\"\n            :class=\"{ 'bg-gray-50 shadow-inner dark:bg-gray-500': noteType === 'system_message' }\"\n            @click=\"changeNoteType('system_message')\"\n          >\n            <div class=\"i-uil:volume inline align-middle text-xl text-center\" />\n            <div>\n              {{ t('user-notification.notification.system') }}\n              <label v-if=\"listNoteCountTypesSystemMessage\" class=\"bg-red-500 text-white text-sm rounded-full px-2\">{{\n                (listNoteCountTypesSystemMessage ? listNoteCountTypesSystemMessage : 0)\n                  > 99 ? '99+' : listNoteCountTypesSystemMessage\n              }}</label>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"w-3/4 p-2 bg-white rounded-md shadow xl:4/5 dark:bg-gray-600\">\n        <div v-if=\"noteType === 'comment_reply'\">\n          <NoteBoxReplyComment v-model:limit=\"limit\" v-model:offset=\"offset\" v-model:pageCount=\"pageCount\" />\n        </div>\n        <div v-else-if=\"noteType === 'system_message'\">\n          <NoteBoxSystemMessage v-model:limit=\"limit\" v-model:offset=\"offset\" v-model:pageCount=\"pageCount\" />\n        </div>\n        <PvPagination\n          v-if=\"!loading\" :page-count=\"Number(pageCount)\" :page=\"page\" @previous=\"jumpToPreviousPage\"\n          @next=\"jumpToNextPage\" @change=\"jumpToSelectedPage\"\n        />\n      </div>\n    </div>\n  </LayoutDefault>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref, watch, watchEffect } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { useRoute, useRouter } from 'vue-router'\nimport NoteBoxReplyComment from './components/NoteBoxReplyComment.vue'\nimport NoteBoxSystemMessage from './components/NoteBoxSystemMessage.vue'\nimport PvPagination from '@/ui/components/PvPagination.vue'\nimport { setSiteTitle } from '@/common/libs/setSiteTitle'\nimport { gql, useQuery, useResult } from '@/graphql'\nimport type { Query, schema } from '@/graphql'\nimport { screenSizes } from '@/css'\nimport {\n  listNoteCountTypes,\n  listNoteCountTypesCommentReply,\n  listNoteCountTypesSystemMessage,\n} from '@/user-notification/libs/listNoteCountTypes'\nimport { startProgress, stopProgress } from '@/nprogress'\n\nconst { t } = useI18n()\nconst route = useRoute()\nconst router = useRouter()\nsetSiteTitle('消息中心' + ' - PatchyVideo')\n\nconst noteDrawerOpen = ref<boolean | undefined>()\nconst listAll = ref(true)\nconst listNoteCountAll = ref<number>(0)\nconst listNoteCountUnread = ref<number>(0)\nconst listNoteCountStatus = ref<'loading' | 'result' | 'error'>()\nconst pageCount = ref<schema.Maybe<number> | undefined>(0)\n\n/* Precess URL query */\nconst limit = computed(() => {\n  return Number(route.query.limit ? (Array.isArray(route.query.limit) ? route.query.limit[0] : route.query.limit) : 10)\n})\nconst offset = computed(() =>\n  Number(route.query.page ? (Array.isArray(route.query.page) ? route.query.page[0] : route.query.page) : 0),\n)\nconst page = computed(() => offset.value + 1)\nconst noteType = computed(() => {\n  return String(\n    route.query.type ? (Array.isArray(route.query.type) ? route.query.type[0] : route.query.type) : 'comment_reply',\n  )\n})\n\n/* Query for notifications */\nconst { result, loading, onError, fetchMore } = useQuery<Query>(\n  gql`\n    query ($offset: Int, $limit: Int, $listAll: Boolean, $noteType: String) {\n      listNotifications(para: { offset: $offset, limit: $limit, listAll: $listAll, noteType: $noteType }) {\n        notes {\n          id\n        }\n        countAll\n        countUnread\n        pageCount\n      }\n      listUnreadNotificationsCount {\n        list {\n          msgtype\n          count\n        }\n      }\n    }\n  `,\n  {\n    offset: offset.value * limit.value,\n    limit: limit.value,\n    listAll: listAll.value,\n    noteType: noteType.value,\n  },\n  {\n    notifyOnNetworkStatusChange: true,\n  },\n)\nwatchEffect(() => {\n  if (loading.value) {\n    listNoteCountStatus.value = 'loading'\n    startProgress()\n  }\n  else {\n    listNoteCountStatus.value = 'result'\n    stopProgress()\n  }\n})\n\nconst listNotifications = useResult(result, null, data => data?.listNotifications)\nconst listUnreadNotificationsCount = useResult(result, null, data => data?.listUnreadNotificationsCount)\nwatchEffect(() => {\n  if (listNotifications.value) {\n    listNoteCountAll.value = listNotifications.value.countAll\n    listNoteCountUnread.value = listNotifications.value.countUnread\n    if (listUnreadNotificationsCount.value) {\n      listUnreadNotificationsCount.value.list.forEach((item) => {\n        if (item.msgtype === 'system_message')\n          listNoteCountTypes.value.systemMessage = item.count\n        else if (item.msgtype === 'comment_reply')\n          listNoteCountTypes.value.commentReply = item.count\n      })\n    }\n    pageCount.value = listNotifications.value.pageCount\n  }\n  else {\n    listNoteCountStatus.value = 'error'\n  }\n})\nonError(() => {\n  // errNote.value = err.message\n  listNoteCountStatus.value = 'error'\n})\n\nconst URLQuery = computed(() => route.query)\nwatch(URLQuery, () => {\n  fetchMore({\n    variables: {\n      offset: offset.value * limit.value,\n      limit: limit.value,\n      listAll: listAll.value,\n      noteType: noteType.value,\n    },\n    updateQuery(previousQueryResult, { fetchMoreResult }) {\n      if (!fetchMoreResult)\n        return previousQueryResult\n      return fetchMoreResult\n    },\n  })\n})\n\n/* Change the router query to trigger the search function */\nfunction jumpToPreviousPage(): void {\n  const query = JSON.parse(JSON.stringify(route.query))\n  query.page = offset.value - 1\n  router.push({ path: route.path, query })\n}\nfunction jumpToNextPage(): void {\n  const query = JSON.parse(JSON.stringify(route.query))\n  query.page = offset.value + 1\n  router.push({ path: route.path, query })\n}\nfunction jumpToSelectedPage(page: number): void {\n  const query = JSON.parse(JSON.stringify(route.query))\n  query.page = page - 1\n  router.push({ path: route.path, query })\n}\nfunction changeNoteType(type: string): void {\n  const query = JSON.parse(JSON.stringify(route.query))\n  if (query.type === type)\n    return\n  noteDrawerOpen.value = false\n  query.page = 0\n  query.type = type\n  router.push({ path: route.path, query })\n}\n</script>\n"],"names":["openInNewTab","url","t","useI18n","noteType","ref","listAll","limit","offset","pageCount","useVModels","props","emit","listNoteStatus","listNote","listNoteCountAll","listNoteCountUnread","result","loading","onError","fetchMore","useQuery","gql","watchEffect","startProgress","stopProgress","listNotifications","useResult","data","errMsg","err","watch","previousQueryResult","fetchMoreResult","mutate","markAsReadLoading","onDone","markAsReadError","useMutation","markAsReadMutationCount","isMarkAll","markAsRead","markAll","noteType2","noteId","noteIsRead","listNoteCountTypes","listNoteCountTypesSystemMessage","computed","listNoteCountTypesCommentReply","listNoteRead","listNoteOpenID","item","note","route","useRoute","router","useRouter","setSiteTitle","noteDrawerOpen","listNoteCountStatus","page","listUnreadNotificationsCount","URLQuery","jumpToPreviousPage","query","jumpToNextPage","jumpToSelectedPage","page2","changeNoteType","type"],"mappings":"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"}